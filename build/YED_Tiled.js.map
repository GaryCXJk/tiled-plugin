{"version":3,"sources":["webpack:///webpack/bootstrap 45de883de4801e2fd30f","webpack:///./src/TiledTilemap.js","webpack:///./src/index.js","webpack:///./src/TilesetManager.js","webpack:///./src/DataManager.js","webpack:///./src/ImageManager.js","webpack:///./src/TiledManager.js","webpack:///./src/Sprite_TiledPriorityTile.js","webpack:///./src/AlphaFilter.js","webpack:///./src/TiledTileLayer.js","webpack:///./src/TiledTileShader.js","webpack:///./src/Game_Map.js","webpack:///./src/Game_CharacterBase.js","webpack:///./src/Game_Player.js","webpack:///./src/Sprite_Character.js","webpack:///./src/Spriteset_Map.js"],"names":["TiledTilemap","tiledData","_tiledData","_layers","_parallaxlayers","_priorityTiles","_priorityTilesCount","setupTiled","_setupSize","_setupAnim","width","_width","height","_height","margin","_margin","tileCols","Math","ceil","_tileWidth","tileRows","_tileHeight","tilewidth","tileheight","_layerWidth","_layerHeight","_mapWidth","_mapHeight","_animFrame","_animDuration","id","_needsRepaint","parameters","PluginManager","useSquareShader","Number","hasOwnProperty","layers","layerData","zIndex","type","_createImageLayer","properties","parseInt","collision","toLevel","regionId","tileFlags","layer","layerId","spriteId","Sprite","_counter","alpha","opacity","transition","isShown","TiledManager","checkLayerHidden","transitionStep","minAlpha","min","minimumOpacity","push","addChild","_createPriorityTiles","pluginParams","size","Array","keys","x","sprite","Sprite_TiledPriorityTile","z","hide","renderer","bitmaps","map","_baseTexture","PIXI","Texture","setBitmaps","_updateAnim","needRefresh","key","refresh","startX","startY","ox","oy","roundPixels","floor","origin","y","offsetX","offsetx","offsetY","offsety","position","origX","origY","clear","_paintTiles","_paintObjectLayers","length","visible","_paintTilesLayer","objects","obj","gid","tileId","textureId","_getTextureId","dx","dy","positionHeight","_paintPriorityTile","_paintTile","mx","my","horizontalWrap","mod","verticalWrap","tilePosition","data","rectLayer","children","tileset","tilesets","w","h","columns","rId","_getAnimTileId","firstgid","ux","uy","_isPriorityTile","tileproperties","addRect","anchor","bitmap","setFrame","priority","_getPriority","_getZIndex","show","tilecount","tilesData","tiles","animation","frame","duration","tileid","playerZIndex","level","layerIds","hideOnLevel","removeChild","forEach","indexOf","hideLayer","hasHideProperties","a","b","repeatX","repeatY","deltaX","deltaY","autoX","autoY","hue","ignoreLoading","Sprite_Base","TilingSprite","move","Graphics","_transition","_baseAlpha","_minAlpha","_isShown","_transitionPhase","ImageManager","loadParserParallax","image","baseX","baseY","stepAutoX","stepAutoY","visibility","max","$gameMap","displayX","tileWidth","displayY","tileHeight","val","ShaderTilemap","addListener","Game_Player","options","d","$gameParty","members","actor","checkFloorEffect","moveStraight","addHideFunction","$gamePlayer","hideOnRegion","hideOnRegions","split","String","regionIds","regions","filter","region","$gameSwitches","value","hideOnSwitch","showOnSwitch","addFlag","TilesetManager","Error","window","_getFilename","path","paths","_getRealPath","getTileset","realPath","loadTileset","callback","xhr","XMLHttpRequest","open","overrideMimeType","onreadystatechange","readyState","status","responseText","JSON","parse","send","DataManager","_tempTiledData","_tiledLoaded","_loadMapData","loadMapData","mapId","call","loadTiledMapData","unloadTiledMapData","idx","tiledLoaded","tilesRequired","source","realTileset","Object","assign","returnTileset","_isMapLoaded","isMapLoaded","defaultLoaded","loadParserTileset","loadEmptyBitmap","shift","filename","slice","join","loadNormalBitmap","_listeners","_hideFunctions","_hideIgnoreFunctions","collisions","levelChanges","_tileFlags","_tileFlagIndex","objectName","listener","recursive","name","triggerListener","object","constructor","top","proto","__proto__","ignore","flagIds","flagId","getFlag","getFlagNames","getFlagLocation","flag","bit","group","initialize","apply","arguments","prototype","create","updateVisibility","fragmentSrc","filters","AlphaFilter","glShaderKey","uniforms","uAlpha","Filter","TiledTileLayer","useSquare","texPerChild","gl","tiledTileShader","plugins","tilemap","maxTextures","shader","setObjectRenderer","bindShader","_globalMat","Matrix","_activeRenderTarget","projectionMatrix","copy","append","worldTransform","toArray","shadowColor","tempScale","_tempScale","ps","pointScale","projectionScale","abs","resolution","af","animationFrame","tileAnim","i","renderWebGL","CompositeRectTileLayer","GLBuffer","glCore","VertexArrayObject","squareShaderFrag","squareShaderVert","rectShaderFrag","rectShaderVert","TiledTileShader","vert","frag","shaderGenerator","generateFragmentSrc","vertSize","vertPerQuad","anim","stride","fillSamplers","vb","createVao","addIndex","indexBuffer","addAttribute","attributes","aVertexPosition","FLOAT","aTextureCoord","aFrame","aAnim","aTextureId","TilemapShader","defineProperty","Game_Map","get","configurable","varID","_currentMapLevel","$gameVariables","set","setValue","_setup","setup","_collisionMap","_arrowCollisionMap","_regions","_mapLevelChange","_positionHeightChange","_collisionMapLayers","_arrowCollisionMapLayers","_regionsLayers","_mapLevelChangeLayers","_positionHeightChangeLayers","_tileFlagsLayers","currentMapLevel","isTiledMap","$dataMap","_setupTiled","_tiledInitialized","_refreshList","character","refreshBushDepth","isTiledInitialized","setRefreshDepth","_convertChunks","_initializeMapLevel","_setupCollision","_setupRegion","_setupMapLevelChange","_setupTileFlags","_setupTiledEvents","chunks","fill","chunk","realX","_initializeMapLevelData","dataTypes","defaultData","dataType","defaultValue","typeData","_setupCollisionFull","_setupCollisionArrow","halfWidth","halfHeight","isHalfTile","ids","_getTileset","tileData","collisionUpLeft","collisionUpRight","collisionDownLeft","collisionDownRight","arrowImpassable","arrowCollisionMap","realBit","arrowImpassableDown","arrowImpassableLeft","arrowImpassableRight","arrowImpassableUp","regionMap","regionOffset","levelChangeMap","_setupPositionHeightChange","positionHeightChangeMap","floorHeight","tileFlagMap","_getTileFlags","_combineFlags","flags","flagNames","property","prop","toUpperCase","target","eventId","vehicle","event","_events","toLowerCase","setLocation","locate","_tiledProperties","_regionId","allIds","index","regionLayer","regionValue","main","regionValues","hideData","_checkPassage","checkPassage","render","arrows","arrowLayer","arrowValue","renderPassage","getPassageLayers","_isPassable","isPassable","collisionMap","collisionLayer","collisionValue","renderIsPassable","getIsPassableLayers","checkMapLevelChanging","mapLevelChange","mapLevelChangeLayer","mapLevelChangeValue","checkPositionHeight","positionHeightChange","positionHeightChangeLayer","positionHeightChangeValue","getTileFlags","tileFlagsLayer","tileFlagsValue","renderTileFlags","checkHasTileFlag","renderHasTileFlag","_isBoatPassable","isBoatPassable","renderIsBoatPassable","_isShipPassable","isShipPassable","renderIsShipPassable","_isAirshipLandOk","isAirshipLandOk","renderIsAirshipLandOk","_isLadder","isLadder","isValid","renderIsLadder","_isBush","isBush","renderIsBush","_isCounter","isCounter","renderIsCounter","_isDamageFloor","isDamageFloor","renderIsDamageFloor","isSlipperyFloor","renderIsSlipperyFloor","getLayerProperties","ignoreHidden","layerProperties","getTileProperties","tileProperties","props","Game_CharacterBase","screenZ","_priorityType","_distancePerFrame","distancePerFrame","distance","_refreshBushDepth","_bushDepth","_updateMove","updateMove","hori","_realX","_x","_realY","_y","isMoving","newLocationHeight","_locationHeight","locationHeight","_checkEventTriggerHere","checkEventTriggerHere","triggers","_checkMapLevelChangingHere","_update","Sprite_Character","update","_character","_initialize","Spriteset_Battle","_parallaxContainers","_createTilemap","Spriteset_Map","createTilemap","_tilemap","isLoopHorizontal","isLoopVertical","_baseSprite","_loadTileset","refreshTileset","_tileset","_updateHideOnLevel","_updateHideOnSpecial","updateParallax","updateTileset","hideOnSpecial"],"mappings":"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","file":"YED_Tiled.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 45de883de4801e2fd30f","import TiledTileLayer from \"./TiledTileLayer\";\r\n\r\nexport class TiledTilemap extends ShaderTilemap {\r\n    initialize(tiledData) {\r\n        this._tiledData = {};\r\n        this._layers = [];\r\n        this._parallaxlayers = [];\r\n        this._priorityTiles = [];\r\n        this._priorityTilesCount = 0;\r\n        this.tiledData = tiledData;\r\n        super.initialize();\r\n        this.setupTiled();\r\n    }\r\n\r\n    get tiledData() {\r\n        return this._tiledData;\r\n    }\r\n\r\n    set tiledData(val) {\r\n        this._tiledData = val;\r\n        this.setupTiled();\r\n    }\r\n\r\n    setupTiled() {\r\n        this._setupSize();\r\n        this._setupAnim();\r\n    }\r\n\r\n    _setupSize() {\r\n        let width = this._width;\r\n        let height = this._height;\r\n        let margin = this._margin;\r\n        let tileCols = Math.ceil(width / this._tileWidth) + 1;\r\n        let tileRows = Math.ceil(height / this._tileHeight) + 1;\r\n        this._tileWidth = this.tiledData.tilewidth;\r\n        this._tileHeight = this.tiledData.tileheight;\r\n        this._layerWidth = tileCols * this._tileWidth;\r\n        this._layerHeight = tileRows * this._tileHeight;\r\n        this._mapWidth = this.tiledData.width;\r\n        this._mapHeight = this.tiledData.height;\r\n    }\r\n\r\n    _setupAnim() {\r\n        this._animFrame = {};\r\n        this._animDuration = {};\r\n    }\r\n\r\n    _createLayers() {\r\n        let id = 0;\r\n        this._needsRepaint = true;\r\n\r\n        let parameters = PluginManager.parameters('ShaderTilemap');\r\n        let useSquareShader = Number(parameters.hasOwnProperty('squareShader') ? parameters['squareShader'] : 1);\r\n\r\n        for (let layerData of this.tiledData.layers) {\r\n            let zIndex = 0;\r\n            if (layerData.type === \"imagelayer\") {\r\n                this._createImageLayer(layerData, id);\r\n                id++;\r\n                continue;\r\n            }\r\n            if (layerData.type != \"tilelayer\") {\r\n                id++;\r\n                continue;\r\n            }\r\n\r\n            if (!!layerData.properties && !!layerData.properties.zIndex) {\r\n                zIndex = parseInt(layerData.properties.zIndex);\r\n            }\r\n\r\n            if (!!layerData.properties && !!layerData.properties.collision) {\r\n                id++;\r\n                continue;\r\n            }\r\n\r\n            if (!!layerData.properties && !!layerData.properties.toLevel) {\r\n                id++;\r\n                continue;\r\n            }\r\n\r\n            if (!!layerData.properties && !!layerData.properties.regionId) {\r\n                id++;\r\n                continue;\r\n            }\r\n\r\n            if (!!layerData.properties && layerData.properties.tileFlags === 'hide') {\r\n                id++;\r\n                continue;\r\n            }\r\n\r\n            let layer = new TiledTileLayer(zIndex, [], useSquareShader);\r\n            layer.layerId = id; // @dryami: hack layer index\r\n            layer.spriteId = Sprite._counter++;\r\n            layer.alpha = layerData.opacity;\r\n            if(!!layerData.properties && layerData.properties.transition) {\r\n                layer.transition = layerData.properties.transition\r\n                layer.isShown = !TiledManager.checkLayerHidden(layerData)\r\n                layer.transitionStep = layer.isShown ? layer.transition : 0\r\n                layer.minAlpha = Math.min(layer.alpha, (layerData.properties.minimumOpacity || 0))\r\n            }\r\n            this._layers.push(layer);\r\n            this.addChild(layer);\r\n            id++;\r\n        }\r\n\r\n        this._createPriorityTiles();\r\n    }\r\n\r\n    _createPriorityTiles() {\r\n        let pluginParams = PluginManager.parameters(\"YED_Tiled\");\r\n        let size = parseInt(pluginParams[\"Priority Tiles Limit\"]);\r\n        let zIndex = parseInt(pluginParams[\"Z - Player\"]);\r\n        for (let x of Array(size).keys()) {\r\n            let sprite = new Sprite_TiledPriorityTile();\r\n            sprite.z = sprite.zIndex = zIndex;\r\n            sprite.layerId = -1;\r\n            sprite.hide();\r\n            this.addChild(sprite);\r\n            this._priorityTiles.push(sprite);\r\n        }\r\n    }\r\n\r\n    _hackRenderer(renderer) {\r\n        return renderer;\r\n    }\r\n\r\n    refreshTileset() {\r\n        var bitmaps = this.bitmaps.map(function (x) { return x._baseTexture ? new PIXI.Texture(x._baseTexture) : x; });\r\n        for (let layer of this._layers) {\r\n            layer.setBitmaps(bitmaps);\r\n        }\r\n    }\r\n\r\n    update() {\r\n        super.update();\r\n        this._updateAnim();\r\n    }\r\n\r\n    _updateAnim() {\r\n        let needRefresh = false;\r\n        for (let key in this._animDuration) {\r\n            this._animDuration[key] -= 1;\r\n            if (this._animDuration[key] <= 0) {\r\n                this._animFrame[key] += 1;\r\n                needRefresh = true;\r\n            }\r\n        }\r\n\r\n        if (needRefresh) {\r\n            this.refresh();\r\n        }\r\n    }\r\n\r\n    _updateLayerPositions(startX, startY) {\r\n        let ox = 0;\r\n        let oy = 0;\r\n        if (this.roundPixels) {\r\n            ox = Math.floor(this.origin.x);\r\n            oy = Math.floor(this.origin.y);\r\n        } else {\r\n            ox = this.origin.x;\r\n            oy = this.origin.y;\r\n        }\r\n\r\n        for (let layer of this._layers) {\r\n            let layerData = this.tiledData.layers[layer.layerId];\r\n            let offsetX = layerData.offsetx || 0;\r\n            let offsetY = layerData.offsety || 0;\r\n            layer.position.x = startX * this._tileWidth - ox + offsetX;\r\n            layer.position.y = startY * this._tileHeight - oy + offsetY;\r\n        }\r\n\r\n        for (let sprite of this._priorityTiles) {\r\n            let layerData = this.tiledData.layers[sprite.layerId];\r\n            let offsetX = layerData ? layerData.offsetx || 0 : 0;\r\n            let offsetY = layerData ? layerData.offsety || 0 : 0;\r\n            sprite.x = sprite.origX + startX * this._tileWidth - ox + offsetX + sprite.width / 2;\r\n            sprite.y = sprite.origY + startY * this._tileHeight - oy + offsetY + sprite.height;\r\n        }\r\n    }\r\n\r\n    _paintAllTiles(startX, startY) {\r\n        this._priorityTilesCount = 0;\r\n        for (let layer of this._layers) {\r\n            layer.clear();\r\n            this._paintTiles(layer, startX, startY);\r\n        }\r\n        let id = 0;\r\n        for (let layerData of this.tiledData.layers) {\r\n            if (layerData.type != \"objectgroup\") {\r\n                id++;\r\n                continue;\r\n            }\r\n            this._paintObjectLayers(id, startX, startY);\r\n            id++;\r\n        }\r\n        while (this._priorityTilesCount < this._priorityTiles.length) {\r\n            let sprite = this._priorityTiles[this._priorityTilesCount];\r\n            sprite.hide();\r\n            sprite.layerId = -1;\r\n            this._priorityTilesCount++;\r\n        }\r\n    }\r\n\r\n    _paintTiles(layer, startX, startY) {\r\n        let layerData = this.tiledData.layers[layer.layerId];\r\n\r\n        if (!layerData.visible) {\r\n            return;\r\n        }\r\n\r\n        if (layerData.type == \"tilelayer\") {\r\n            this._paintTilesLayer(layer, startX, startY);\r\n        }\r\n    }\r\n\r\n    _paintObjectLayers(layerId, startX, startY) {\r\n        let layerData = this.tiledData.layers[layerId];\r\n        let objects = layerData.objects || [];\r\n\r\n        for (let obj of objects) {\r\n            if (!obj.gid) {\r\n                continue;\r\n            }\r\n            if (!obj.visible) {\r\n                continue;\r\n            }\r\n            let tileId = obj.gid;\r\n            let textureId = this._getTextureId(tileId);\r\n            let dx = obj.x - startX * this._tileWidth;\r\n            let dy = obj.y - startY * this._tileHeight - obj.height;\r\n            let positionHeight = 0;\r\n            if(obj.properties && obj.properties.positionHeight) {\r\n                positionHeight = obj.properties.positionHeight;\r\n            }\r\n            this._paintPriorityTile(layerId, textureId, tileId, startX, startY, dx, dy, positionHeight);\r\n        }\r\n    }\r\n\r\n    _paintTilesLayer(layer, startX, startY) {\r\n        let tileCols = Math.ceil(this._width / this._tileWidth) + 1;\r\n        let tileRows = Math.ceil(this._height / this._tileHeight) + 1;\r\n\r\n        for (let y of Array(tileRows).keys()) {\r\n            for (let x of Array(tileCols).keys()) {\r\n                this._paintTile(layer, startX, startY, x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    _paintTile(layer, startX, startY, x, y) {\r\n        let mx = x + startX;\r\n        let my = y + startY;\r\n        if (this.horizontalWrap) {\r\n            mx = mx.mod(this._mapWidth);\r\n        }\r\n        if (this.verticalWrap) {\r\n            my = my.mod(this._mapHeight);\r\n        }\r\n        let tilePosition = mx + my * this._mapWidth;\r\n        let tileId = this.tiledData.layers[layer.layerId].data[tilePosition];\r\n        let rectLayer = layer.children[0];\r\n        let textureId = 0;\r\n\r\n        if (!tileId) {\r\n            return;\r\n        }\r\n\r\n        // TODO: Problem with offsets\r\n        if (mx < 0 || mx >= this._mapWidth || my < 0 || my >= this._mapHeight) {\r\n            return;\r\n        }\r\n\r\n        textureId = this._getTextureId(tileId);\r\n\r\n        let tileset = this.tiledData.tilesets[textureId];\r\n        let dx = x * this._tileWidth;\r\n        let dy = y * this._tileHeight;\r\n        let w = tileset.tilewidth;\r\n        let h = tileset.tileheight;\r\n        let tileCols = tileset.columns;\r\n        let rId = this._getAnimTileId(textureId, tileId - tileset.firstgid);\r\n        let ux = (rId % tileCols) * w;\r\n        let uy = Math.floor(rId / tileCols) * h;\r\n\r\n        if (this._isPriorityTile(layer.layerId)) {\r\n            let positionHeight = 0;\r\n            if(this.tiledData.layers[layer.layerId].properties.positionHeight) {\r\n                positionHeight+= this.tiledData.layers[layer.layerId].properties.positionHeight || 0\r\n            }\r\n            if(tileset.tileproperties &&\r\n                tileset.tileproperties[tileId - tileset.firstgid] &&\r\n                tileset.tileproperties[tileId - tileset.firstgid].positionHeight) {\r\n                positionHeight+= tileset.tileproperties[tileId - tileset.firstgid].positionHeight || 0\r\n            }\r\n            this._paintPriorityTile(layer.layerId, textureId, tileId, startX, startY, dx, dy, positionHeight);\r\n            return;\r\n        }\r\n\r\n        rectLayer.addRect(textureId, ux, uy, dx, dy, w, h);\r\n    }\r\n\r\n    _paintPriorityTile(layerId, textureId, tileId, startX, startY, dx, dy, positionHeight = 0) {\r\n        let tileset = this.tiledData.tilesets[textureId];\r\n        let w = tileset.tilewidth;\r\n        let h = tileset.tileheight;\r\n        let tileCols = tileset.columns;\r\n        let rId = this._getAnimTileId(textureId, tileId - tileset.firstgid);\r\n        let ux = (rId % tileCols) * w;\r\n        let uy = Math.floor(rId / tileCols) * h;\r\n        let sprite = this._priorityTiles[this._priorityTilesCount];\r\n        let layerData = this.tiledData.layers[layerId];\r\n        let offsetX = layerData ? layerData.offsetx || 0 : 0;\r\n        let offsetY = layerData ? layerData.offsety || 0 : 0;\r\n        let ox = 0;\r\n        let oy = 0;\r\n        if (this.roundPixels) {\r\n            ox = Math.floor(this.origin.x);\r\n            oy = Math.floor(this.origin.y);\r\n        } else {\r\n            ox = this.origin.x;\r\n            oy = this.origin.y;\r\n        }\r\n\r\n        if (this._priorityTilesCount >= this._priorityTiles.length) {\r\n            return;\r\n        }\r\n\r\n        sprite.layerId = layerId;\r\n        sprite.anchor.x = 0.5;\r\n        sprite.anchor.y = 1.0;\r\n        sprite.origX = dx;\r\n        sprite.origY = dy;\r\n        sprite.x = sprite.origX + startX * this._tileWidth - ox + offsetX + w / 2;\r\n        sprite.y = sprite.origY + startY * this._tileHeight - oy + offsetY + h;\r\n        sprite.bitmap = this.bitmaps[textureId];\r\n        sprite.setFrame(ux, uy, w, h);\r\n        sprite.priority = this._getPriority(layerId);\r\n        sprite.z = sprite.zIndex = this._getZIndex(layerId);\r\n        sprite.positionHeight = positionHeight;\r\n        sprite.show();\r\n\r\n        this._priorityTilesCount += 1;\r\n    }\r\n\r\n    _getTextureId(tileId) {\r\n        let textureId = 0;\r\n        for (let tileset of this.tiledData.tilesets) {\r\n            if (tileId < tileset.firstgid\r\n                || tileId >= tileset.firstgid + tileset.tilecount) {\r\n                textureId++;\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n        return textureId;\r\n    }\r\n\r\n    _getAnimTileId(textureId, tileId) {\r\n        let tilesData = this.tiledData.tilesets[textureId].tiles;\r\n        if (!tilesData) {\r\n            return tileId;\r\n        }\r\n        if (!tilesData[tileId]) {\r\n            return tileId;\r\n        }\r\n        if (!tilesData[tileId].animation) {\r\n            return tileId;\r\n        }\r\n        let animation = tilesData[tileId].animation;\r\n        this._animFrame[tileId] = this._animFrame[tileId] || 0;\r\n        let frame = this._animFrame[tileId];\r\n        this._animFrame[tileId] = !!animation[frame] ? frame : 0;\r\n        frame = this._animFrame[tileId];\r\n        let duration = animation[frame].duration / 1000 * 60;\r\n        this._animDuration[tileId] = this._animDuration[tileId] || duration;\r\n        if (this._animDuration[tileId] <= 0) {\r\n            this._animDuration[tileId] = duration;\r\n        }\r\n        return animation[frame].tileid;\r\n    }\r\n\r\n    _getPriority(layerId) {\r\n        let layerData = this.tiledData.layers[layerId];\r\n        if (!layerData.properties) {\r\n            return 0;\r\n        }\r\n        if (!layerData.properties.priority) {\r\n            return 0;\r\n        }\r\n        return parseInt(layerData.properties.priority)\r\n    }\r\n\r\n    _isPriorityTile(layerId) {\r\n        let pluginParams = PluginManager.parameters(\"YED_Tiled\");\r\n        let playerZIndex = parseInt(pluginParams[\"Z - Player\"]);\r\n        let zIndex = this._getZIndex(layerId);\r\n        return this._getPriority(layerId) > 0\r\n            && zIndex === playerZIndex;\r\n    }\r\n\r\n    _getZIndex(layerId) {\r\n        let layerData = this.tiledData.layers[layerId];\r\n        if (!layerData) {\r\n            return 0;\r\n        }\r\n        if (!layerData.properties || !layerData.properties.zIndex) {\r\n            return 0;\r\n        }\r\n        return parseInt(layerData.properties.zIndex);\r\n    }\r\n\r\n    hideOnLevel(level) {\r\n        let layerIds = [];\r\n        for (let layer of this._layers) {\r\n            let layerData = this.tiledData.layers[layer.layerId];\r\n            if (layerData.properties && layerData.properties.hasOwnProperty(\"hideOnLevel\")) {\r\n                if (parseInt(layerData.properties.hideOnLevel) !== level) {\r\n                    if(layer.transition) {\r\n                        /* If this layer has a transition, we'll need to tell the layer that\r\n                           it's supposed to be showing. */\r\n                           layer.isShown = true;\r\n                    }\r\n                    this.addChild(layer);\r\n                    continue;\r\n                }\r\n                /* Since the layer is supposed to be hidden, let's first let it transition if\r\n                   it has a transition fadeout. */\r\n                if(layer.transition) {\r\n                    layer.isShown = false;\r\n                    if(layer.minAlpha > 0 || layer.transitionStep > 0) {\r\n                        this.addChild(layer)\r\n                        continue;\r\n                    }\r\n                }\r\n                /* Otherwise remove the layer and hide it */\r\n                layerIds.push(layer.layerId);\r\n                this.removeChild(layer);\r\n            }\r\n        }\r\n        this._priorityTiles.forEach(sprite => {\r\n            if(layerIds.indexOf(sprite.layerId) > -1) {\r\n                sprite.visible = true;\r\n            }\r\n        })\r\n    }\r\n    \r\n    hideOnSpecial() {\r\n        for(let layer of this._layers) {\r\n            let layerData = this.tiledData.layers[layer.layerId];\r\n\t\t\tif(layerData.properties) {\r\n                let hideLayer = TiledManager.checkLayerHidden(layerData);\r\n                \r\n\t\t\t\t/* If the layer has a hide property, run this code.\r\n\t\t\t\t * You don't need to run it for layers that don't have any properties that would\r\n\t\t\t\t   hide this layer. */\r\n\t\t\t\tif (TiledManager.hasHideProperties(layerData)) {\r\n\t\t\t\t\t/* If the layer isn't supposed to be hidden, add the layer to the container */\r\n\t\t\t\t\tif (!hideLayer) {\r\n                        if(layer.transition) {\r\n                            /* If this layer has a transition, we'll need to tell the layer that\r\n                               it's supposed to be showing. */\r\n                               layer.isShown = true;\r\n                        }\r\n\t\t\t\t\t\tthis.addChild(layer);\r\n\t\t\t\t\t\tcontinue;\r\n                    }\r\n                    /* Since the layer is supposed to be hidden, let's first let it transition if\r\n                       it has a transition fadeout. */\r\n                    if(layer.transition) {\r\n                        layer.isShown = false;\r\n                        if(layer.minAlpha > 0 || layer.transitionStep > 0) {\r\n                            this.addChild(layer)\r\n                            continue;\r\n                        }\r\n                    }\r\n                    /* Otherwise remove the layer and hide it */\r\n\t\t\t\t\tthis.removeChild(layer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n        }\r\n    }\r\n\t\r\n    _compareChildOrder(a, b) {\r\n        if((this._layers.indexOf(a) > -1 || this._parallaxlayers.indexOf(a) > -1) &&\r\n            (this._layers.indexOf(b) > -1 || this._parallaxlayers.indexOf(b) > -1)) {\r\n            if ((a.z || 0) !== (b.z || 0)) {\r\n                return (a.z || 0) - (b.z || 0);\r\n            } else if ((a.priority || 0) !== (b.priority || 0)) {\r\n                return (a.priority || 0) - (b.priority || 0);\r\n            } else if((a.layerId || 0) !== (b.layerId || 0)) {\r\n                return (a.layerId || 0) - (b.layerId || 0);\r\n            } else {\r\n                return a.spriteId - b.spriteId;\r\n            }\r\n        } else if ((a.z || 0) !== (b.z || 0)) {\r\n            return (a.z || 0) - (b.z || 0);\r\n        } else if (((a.y || 0) + (a.positionHeight || 0)) !== ((b.y || 0) + (b.positionHeight || 0))) {\r\n            return ((a.y || 0) + (a.positionHeight || 0)) - ((b.y || 0) + (b.positionHeight || 0));\r\n        } else if ((a.priority || 0) !== (b.priority || 0)) {\r\n            return (a.priority || 0) - (b.priority || 0);\r\n        } else {\r\n            return a.spriteId - b.spriteId;\r\n        }\r\n    }\r\n\r\n    /* Parallax map stuff */\r\n\r\n    _createImageLayer(layerData, id) {\r\n        let zIndex = 0;\r\n        let repeatX = true;\r\n        let repeatY = true;\r\n        let deltaX = 0;\r\n        let deltaY = 0;\r\n        let autoX = 0;\r\n        let autoY = 0;\r\n        let hue = 0;\r\n\r\n        if(!!layerData.properties) {\r\n            if(!!layerData.properties.ignoreLoading) {\r\n                return;\r\n            }\r\n            if (!!layerData.properties.zIndex) {\r\n                zIndex = parseInt(layerData.properties.zIndex);\r\n            }\r\n            if(layerData.properties.hasOwnProperty('repeatX')) {\r\n                repeatX = !!layerData.properties.repeatX;\r\n            }\r\n            if(layerData.properties.hasOwnProperty('repeatY')) {\r\n                repeatY = !!layerData.properties.repeatY;\r\n            }\r\n            if(!!layerData.properties.deltaX) {\r\n                deltaX = layerData.properties.deltaX;\r\n            }\r\n            if(!!layerData.properties.deltaY) {\r\n                deltaY = layerData.properties.deltaY;\r\n            }\r\n            if(!!layerData.properties.autoX) {\r\n                autoX = layerData.properties.autoX;\r\n            }\r\n            if(!!layerData.properties.autoY) {\r\n                autoY = layerData.properties.autoY;\r\n            }\r\n            if(!!layerData.properties.hue) {\r\n                hue = parseInt(layerData.properties.hue)\r\n            }\r\n        }\r\n\r\n        let layer;\r\n\r\n        if(!repeatX && !repeatY && !autoX && !autoY) {\r\n            layer = new Sprite_Base();\r\n        } else {\r\n            layer = new TilingSprite();\r\n            layer.move(0, 0, Graphics.width, Graphics.height);\r\n        }\r\n        layer.layerId = id;\r\n        layer.spriteId = Sprite._counter++;\r\n        layer.alpha = layerData.opacity;\r\n        if(TiledManager.hasHideProperties(layerData) && !!layerData.properties.transition) {\r\n            layer._transition = layerData.properties.transition;\r\n            layer._baseAlpha = layerData.opacity;\r\n            layer._minAlpha = Math.min(layer._baseAlpha, (layerData.properties.minimumOpacity || 0));\r\n            layer._isShown = !TiledManager.checkLayerHidden(layerData);\r\n            layer._transitionPhase = layer._isShown ? layer._transition : 0\r\n        }\r\n        layer.bitmap = ImageManager.loadParserParallax(layerData.image, hue);\r\n        layer.baseX = layerData.x + (layerData.offsetx || 0);\r\n        layer.baseY = layerData.y + (layerData.offsety || 0);\r\n        layer.z = layer.zIndex = zIndex;\r\n        layer.repeatX = repeatX;\r\n        layer.repeatY = repeatY;\r\n        layer.deltaX = deltaX;\r\n        layer.deltaY = deltaY;\r\n        layer.stepAutoX = autoX;\r\n        layer.stepAutoY = autoY;\r\n        layer.autoX = 0;\r\n        layer.autoY = 0;\r\n        this._parallaxlayers.push(layer);\r\n        this.addChild(layer);\r\n    }\r\n\r\n    updateParallax() {\r\n        this._parallaxlayers.forEach(layer => {\r\n            let layerData = this.tiledData.layers[layer.layerId];\r\n            if(TiledManager.hasHideProperties(layerData)) {\r\n                let visibility = TiledManager.checkLayerHidden(layerData);\r\n                if(!!layerData.properties.transition) {\r\n                    layer._isShown = !visibility;\r\n                    layer._transitionPhase = Math.max(0, Math.min(layer._transition, layer._transitionPhase + (layer._isShown ? 1 : -1)));\r\n                    layer.alpha = (((layer._baseAlpha - layer._minAlpha) * (layer._transitionPhase / layer._transition)) + layer._minAlpha);\r\n                    visibility = layer._minAlpha > 0 || layer._transitionPhase > 0;\r\n                }\r\n                layer.visible = visibility;\r\n            }\r\n            if(!!layer.origin) {\r\n                if(!layer.repeatX) {\r\n                    layer.origin.x = layer.baseX + layer.autoX;\r\n                    layer.x = layer.baseX - $gameMap.displayX() * $gameMap.tileWidth() * layer.deltaX;\r\n                    layer.width = layer.bitmap.width;\r\n                } else {\r\n                    layer.origin.x = layer.baseX + layer.autoX + $gameMap.displayX() * $gameMap.tileWidth() * layer.deltaX;\r\n                    layer.x = layer.baseX;\r\n                    layer.width = Graphics.width;\r\n                }\r\n                if(!layer.repeatY) {\r\n                    layer.origin.y = layer.baseY + layer.autoY;\r\n                    layer.y = layer.baseY - $gameMap.displayY() * $gameMap.tileHeight() * layer.deltaY;\r\n                    layer.height = layer.bitmap.height;\r\n                } else {\r\n                    layer.origin.y = layer.baseY + layer.autoY + $gameMap.displayY() * $gameMap.tileHeight() * layer.deltaY;\r\n                    layer.y = layer.baseY;\r\n                    layer.height = Graphics.height;\r\n                }\r\n                layer.autoX+= layer.stepAutoX;\r\n                layer.autoY+= layer.stepAutoY;\r\n            } else {\r\n                layer.x = layer.baseX - $gameMap.displayX() * $gameMap.tileWidth() * layer.deltaX;\r\n                layer.y = layer.baseY - $gameMap.displayY() * $gameMap.tileHeight() * layer.deltaY;\r\n            }\r\n        })\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/TiledTilemap.js","import \"./TilesetManager\";\r\nimport \"./DataManager\";\r\nimport \"./ImageManager\";\r\nimport \"./TiledManager\";\r\nimport \"./Sprite_TiledPriorityTile\";\r\nimport \"./AlphaFilter\";\r\nimport { TiledTilemap } from \"./TiledTilemap\";\r\nimport \"./Game_Map\";\r\nimport \"./Game_CharacterBase\";\r\nimport \"./Game_Player\";\r\nimport \"./Sprite_Character\";\r\nimport \"./Spriteset_Map\";\r\n\r\n/* INITIALIZES LISTENERS */\r\n\r\n// Add floor damage while on a slippery floor\r\nTiledManager.addListener(Game_Player, 'slipperyfloor', function(options) {\r\n    const {d} = options\r\n    $gameParty.members().forEach(actor => {\r\n        actor.checkFloorEffect();\r\n    })\r\n    this.moveStraight(d);\r\n})\r\n\r\n/* INITIALIZES HIDE FUNCTIONS */\r\n\r\nTiledManager.addHideFunction('hideOnRegion', function(layerData) {\r\n    /* Hide if player is on certain region */\r\n    let regionId = $gameMap.regionId($gamePlayer.x, $gamePlayer.y);\r\n    let hideLayer = false;\r\n    if(parseInt(layerData.properties.hideOnRegion) === regionId) {\r\n        hideLayer = true;\r\n    }\r\n    return hideLayer;\r\n}, ['regions'])\r\n\r\nTiledManager.addHideFunction('hideOnRegions', function(layerData) {\r\n    /* Hide if player is on certain region */\r\n    let regionId = $gameMap.regionId($gamePlayer.x, $gamePlayer.y);\r\n    let hideLayer = false;\r\n    if(layerData.properties.hideOnRegions.split(',').indexOf(String(regionId)) !== -1) {\r\n        hideLayer = true;\r\n    }\r\n    return hideLayer;\r\n}, ['regions'])\r\n\r\nTiledManager.addHideFunction('hideOnAnyRegions', function(layerData) {\r\n    /* Hide if player is on certain region */\r\n    let regionIds = $gameMap.regionIds($gamePlayer.x, $gamePlayer.y);\r\n    let hideLayer = false;\r\n    let regions = layerData.properties.hideOnRegions.split(',');\r\n    if(regions.filter(region => regionIds.indexOf(region) > -1).length > 0) {\r\n        hideLayer = true;\r\n    }\r\n    return hideLayer;\r\n}, ['regions'])\r\n\r\nTiledManager.addHideFunction('hideOnSwitch', function(layerData) {\r\n    /* Hide if switch is on */\r\n    let hideLayer = false;\r\n    if($gameSwitches.value(layerData.properties.hideOnSwitch)) {\r\n        hideLayer = true;\r\n    }\r\n    return hideLayer;\r\n})\r\n\r\nTiledManager.addHideFunction('showOnSwitch', function(layerData) {\r\n    /* Show if switch is on */\r\n    let hideLayer = false;\r\n    if(!$gameSwitches.value(layerData.properties.showOnSwitch)) {\r\n        hideLayer = true;\r\n    }\r\n    return hideLayer;\r\n})\r\n\r\n/* INITIALIZES FLAGS */\r\n\r\nTiledManager.addFlag('boat', 'ship', 'airship')\r\nTiledManager.addFlag('ladder', 'bush', 'counter', 'damage')\r\nTiledManager.addFlag('ice', 'autoDown', 'autoLeft', 'autoRight', 'autoUp')\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","//-----------------------------------------------------------------------------\r\n// TilesetManager\r\n//\r\n// The static class that manages the TileD tilesets.\r\n\r\nfunction TilesetManager() {\r\n    throw new Error('This is a static class');\r\n}\r\n\r\nwindow.TilesetManager = TilesetManager;\r\nTilesetManager.tilesets = {};\r\n\r\nlet _getFilename = function(path) {\r\n    let paths = path.split(\"/\");\r\n    return paths[paths.length - 1];\r\n};\r\n\r\nlet _getRealPath = function(path) {\r\n    let pluginParams = PluginManager.parameters(\"YED_Tiled\");\r\n    return pluginParams[\"Tilesets Location\"] + _getFilename(path);\r\n};\r\n\r\nTilesetManager.getTileset = function(path) {\r\n    let realPath = _getRealPath(path);\r\n    return TilesetManager.tilesets[_getFilename(path)];\r\n};\r\n\r\nTilesetManager.loadTileset = function(path, callback = false) {\r\n    let realPath = _getRealPath(path);\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open('GET', './' + realPath);\r\n    xhr.overrideMimeType('application/json');\r\n\r\n    // on success callback\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState === 4) {\r\n            let tileset = false;\r\n            if (xhr.status === 200 || xhr.responseText !== \"\") {\r\n                tileset = JSON.parse(xhr.responseText);\r\n                TilesetManager.tilesets[_getFilename(path)] = tileset;\r\n            }\r\n            if(callback) {\r\n                callback(tileset);\r\n            }\r\n        }\r\n    };\r\n\r\n    // send request\r\n    xhr.send();\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/TilesetManager.js","DataManager._tempTiledData = null;\r\nDataManager._tiledLoaded = false;\r\n\r\nlet _loadMapData = DataManager.loadMapData;\r\nDataManager.loadMapData = function (mapId) {\r\n    _loadMapData.call(this, mapId);\r\n    if (mapId > 0) {\r\n        this.loadTiledMapData(mapId);\r\n    } else {\r\n        this.unloadTiledMapData();\r\n    }\r\n};\r\n\r\nDataManager.loadTiledMapData = function (mapId) {\r\n    var xhr = new XMLHttpRequest();\r\n    let pluginParams = PluginManager.parameters(\"YED_Tiled\");\r\n    xhr.open('GET', \"./\" + pluginParams[\"Maps Location\"] + \"Map\" + mapId + \".json\");\r\n    xhr.overrideMimeType('application/json');\r\n\r\n    // on success callback\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState === 4) {\r\n            if (xhr.status === 200 || xhr.responseText !== \"\") {\r\n                DataManager._tempTiledData = JSON.parse(xhr.responseText);\r\n            }\r\n            let tiledLoaded = true;\r\n            let tilesRequired = 0;\r\n            if(DataManager._tempTiledData && DataManager._tempTiledData.tilesets && DataManager._tempTiledData.tilesets.length > 0) {\r\n                for(var idx = 0; idx < DataManager._tempTiledData.tilesets.length; idx++) {\r\n                    let tileset = DataManager._tempTiledData.tilesets[idx];\r\n                    if(tileset.source) {\r\n                        let realTileset = TilesetManager.getTileset(tileset.source);\r\n                        if(realTileset) {\r\n                            DataManager._tempTiledData.tilesets[idx] = Object.assign({}, realTileset, {firstgid: DataManager._tempTiledData.tilesets[idx].firstgid});\r\n                        } else {\r\n                            tiledLoaded = false;\r\n                            tilesRequired++;\r\n                            +function(idx) {\r\n                                TilesetManager.loadTileset(tileset.source, function(returnTileset) {\r\n                                    DataManager._tempTiledData.tilesets[idx] = Object.assign({}, returnTileset, {firstgid: DataManager._tempTiledData.tilesets[idx].firstgid});\r\n                                    tilesRequired--;\r\n                                    if(tilesRequired === 0) {\r\n                                        DataManager._tiledLoaded = true;\r\n                                    }\r\n                                });\r\n                            }(idx);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            DataManager._tiledLoaded = tiledLoaded;\r\n        }\r\n    };\r\n\r\n    // set data to null and send request\r\n    this.unloadTiledMapData();\r\n    xhr.send();\r\n};\r\n\r\nDataManager.unloadTiledMapData = function () {\r\n    DataManager._tempTiledData = null;\r\n    DataManager._tiledLoaded = false;\r\n};\r\n\r\nlet _isMapLoaded = DataManager.isMapLoaded;\r\nDataManager.isMapLoaded = function() {\r\n    let defaultLoaded = _isMapLoaded.call(this);\r\n    let tiledLoaded = DataManager._tiledLoaded;\r\n\r\n    return defaultLoaded && tiledLoaded;\r\n};\n\n\n// WEBPACK FOOTER //\n// ./src/DataManager.js","ImageManager.loadParserTileset = function (path, hue) {\r\n    if (!path) {\r\n        return this.loadEmptyBitmap();\r\n    }\r\n    let paths = path.split(\"/\");\r\n    while(paths[0] === '..') {\r\n        paths.shift();\r\n    }\r\n    let filename = paths[paths.length - 1];\r\n    let realPath = \"img/tilesets/\" + filename;\r\n    if(paths[0] === 'img') {\r\n        realPath = paths.slice(0, -1).join('/') + '/' + filename;\r\n    }\r\n\r\n    return this.loadNormalBitmap(realPath, hue);\r\n};\r\n\r\nImageManager.loadParserParallax = function (path, hue) {\r\n    if (!path) {\r\n        return this.loadEmptyBitmap();\r\n    }\r\n    let paths = path.split(\"/\");\r\n    while(paths[0] === '..') {\r\n        paths.shift();\r\n    }\r\n    let filename = paths[paths.length - 1];\r\n    let realPath = \"img/parallaxes/\" + filename;\r\n    if(paths[0] === 'img') {\r\n        realPath = paths.slice(0, -1).join('/') + '/' + filename;\r\n    }\r\n\r\n    return this.loadNormalBitmap(realPath, hue);\r\n};\n\n\n// WEBPACK FOOTER //\n// ./src/ImageManager.js","//-----------------------------------------------------------------------------\r\n// TiledManager\r\n//\r\n// The static class that manages TileD data, including extensions.\r\n\r\nfunction TiledManager() {\r\n    throw new Error('This is a static class');\r\n}\r\n\r\nwindow.TiledManager = TiledManager;\r\n\r\nlet _listeners = {}\r\nlet _hideFunctions = {}\r\nlet _hideIgnoreFunctions = {\r\n    regions: [],\r\n    collisions: [],\r\n    levelChanges: [],\r\n    tileFlags: []\r\n}\r\nlet _tileFlags = {}\r\nlet _tileFlagIndex = 1;\r\n\r\nTiledManager.addListener = function(objectName, listener, callback, recursive = true) {\r\n    if(typeof objectName === 'function') {\r\n        objectName = objectName.name\r\n    }\r\n    if(!_listeners[objectName]) {\r\n        _listeners[objectName] = {}\r\n    }\r\n    if(!_listeners[objectName][listener]) {\r\n        _listeners[objectName][listener] = []\r\n    }\r\n    callback.recursive = !!recursive\r\n    _listeners[objectName][listener].push(callback)\r\n}\r\n\r\nTiledManager.triggerListener = function(object, listener, options = {}) {\r\n    let objectName = object.constructor.name\r\n    if(!_listeners[objectName] || !_listeners[objectName][listener]) {\r\n        return false\r\n    }\r\n    let top = true\r\n    let proto = object.__proto__\r\n    while(proto) {\r\n        objectName = proto.constructor.name\r\n        if(_listeners[objectName] && _listeners[objectName][listener]) {\r\n            _listeners[objectName][listener].forEach(callback => {\r\n                if(top || callback.recursive) {\r\n                    callback.call(object, options)\r\n                }\r\n            })\r\n        }\r\n        top = false\r\n        proto = proto.__proto__\r\n    }\r\n}\r\n\r\nTiledManager.addHideFunction = function(id, callback, ignore = []) {\r\n    _hideFunctions[id] = callback\r\n\r\n    ignore.forEach((type) => {\r\n        _hideIgnoreFunctions[type].push(id)\r\n    })\r\n}\r\n\r\nTiledManager.checkLayerHidden = function(layerData, ignore = []) {\r\n    if(typeof ignore === 'string') {\r\n        ignore = _hideIgnoreFunctions[ignore] || []\r\n    }\r\n    let keys = Object.keys(_hideFunctions);\r\n    let data = false;\r\n    for(let idx = 0; idx < keys.length; idx++) {\r\n        if(ignore.indexOf(keys) !== -1) {\r\n            continue;\r\n        }\r\n        if(layerData.properties && layerData.properties.hasOwnProperty(keys[idx])) {\r\n            data = data || _hideFunctions[keys[idx]](layerData);\r\n        }\r\n        if(data) {\r\n            return data;\r\n        }\r\n    }\r\n    return data;\r\n}\r\n\r\nTiledManager.hasHideProperties = function(layerData) {\r\n    return (layerData.properties && (\r\n        Object.keys(_hideFunctions).filter(key => {\r\n            return layerData.properties.hasOwnProperty(key)\r\n        }).length > 0)\r\n    );\r\n}\r\n\r\nTiledManager.addFlag = function(...flagIds) {\r\n    flagIds.forEach(flagId => {\r\n        _tileFlags[flagId] = _tileFlagIndex++;\r\n    })\r\n}\r\n\r\nTiledManager.getFlag = function(flagId) {\r\n    return _tileFlags[flagId];\r\n}\r\n\r\nTiledManager.getFlagNames = function() {\r\n    return Object.keys(_tileFlags);\r\n}\r\n\r\nTiledManager.getFlagLocation = function(flagId) {\r\n    let flag = _tileFlags[flagId]\r\n    let bit = (1 << (flag % 16)) & 0xffff;\r\n    let group = Math.floor(flag / 16);\r\n    return [group, bit];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/TiledManager.js","//-----------------------------------------------------------------------------\r\n// Sprite_TiledPriorityTile\r\n//\r\n// The sprite for displaying a priority tile.\r\n\r\nfunction Sprite_TiledPriorityTile() {\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nSprite_TiledPriorityTile.prototype = Object.create(Sprite_Base.prototype);\r\nSprite_TiledPriorityTile.prototype.constructor = Sprite_TiledPriorityTile;\r\n\r\nwindow.Sprite_TiledPriorityTile = Sprite_TiledPriorityTile;\r\n\r\nSprite_TiledPriorityTile.prototype.updateVisibility = function() {\r\n    let visibility = true;\r\n    if(this.layerId > -1) {\r\n        let layer = $gameMap.tiledData.layers[this.layerId];\r\n        if(layer.properties.transition) {\r\n            if(!this._transition) {\r\n                this._transition = layer.properties.transition;\r\n                this._baseAlpha = layer.opacity;\r\n                this._minAlpha = Math.min(this._baseAlpha, (layer.properties.minimumOpacity || 0));\r\n                this._isShown = !TiledManager.checkLayerHidden(layer);\r\n                this._transitionPhase = this._isShown ? this._transition : 0\r\n            } else {\r\n                this._isShown = !TiledManager.checkLayerHidden(layer);\r\n                this._transitionPhase = Math.max(0, Math.min(this._transition, this._transitionPhase + (this._isShown ? 1 : -1)));\r\n            }\r\n            visibility = this._minAlpha > 0 || this._transitionPhase > 0;\r\n            this.opacity = 255 * (((this._baseAlpha - this._minAlpha) * (this._transitionPhase / this._transition)) + this._minAlpha);\r\n        } else {\r\n            visibility = !TiledManager.checkLayerHidden(layer);\r\n        }\r\n    }\r\n    this.visible = visibility;\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Sprite_TiledPriorityTile.js","/* A fallback implementation of AlphaFilter */\r\n\r\nconst fragmentSrc = 'varying vec2 vTextureCoord;' +\r\n'uniform sampler2D uSampler;' +\r\n'uniform float uAlpha;' +\r\n'void main(void)' +\r\n'{' +\r\n'   gl_FragColor = texture2D(uSampler, vTextureCoord) * uAlpha;' +\r\n'}';\r\n\r\nif(!PIXI.filters.AlphaFilter) {\r\n    class AlphaFilter extends PIXI.Filter\r\n    {\r\n        /**\r\n         * @param {number} [alpha=1] Amount of alpha from 0 to 1, where 0 is transparent\r\n         */\r\n        constructor(alpha = 1.0)\r\n        {\r\n            super(\r\n                // vertex shader\r\n                null,\r\n                // fragment shader\r\n               fragmentSrc\r\n            );\r\n            this.alpha = alpha;\r\n            this.glShaderKey = 'alpha';\r\n        }\r\n        /**\r\n         * Coefficient for alpha multiplication\r\n         *\r\n         * @member {number}\r\n         * @default 1\r\n         */\r\n        get alpha()\r\n        {\r\n            return this.uniforms.uAlpha;\r\n        }\r\n        set alpha(value) // eslint-disable-line require-jsdoc\r\n        {\r\n            this.uniforms.uAlpha = value;\r\n        }\r\n    }\r\n    PIXI.filters.AlphaFilter = AlphaFilter;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AlphaFilter.js","import TiledTileShader from \"./TiledTileShader\";\r\n\r\nexport default class TiledTileLayer extends PIXI.tilemap.CompositeRectTileLayer {\r\n    constructor(zIndex, bitmaps, useSquare, texPerChild) {\r\n        super(zIndex, bitmaps, useSquare, texPerChild)\r\n    }\r\n\r\n    renderWebGL(renderer) {\r\n        var gl = renderer.gl;\r\n        if(!this.tiledTileShader) {\r\n            this.tiledTileShader = new TiledTileShader(gl, renderer.plugins.tilemap.maxTextures, this.useSquare)\r\n        }\r\n        var alpha = this.alpha;\r\n        if(this.transition) {\r\n            this.transitionStep = Math.max(0, Math.min(this.transition, this.transitionStep + (this.isShown ? 1 : -1)));\r\n            alpha-= this.minAlpha\r\n            alpha*= (this.transitionStep / this.transition)\r\n            alpha+= this.minAlpha\r\n        }\r\n        //var shader = renderer.plugins.tilemap.getShader(this.useSquare);\r\n        var shader = this.tiledTileShader;\r\n        renderer.setObjectRenderer(renderer.plugins.tilemap);\r\n        renderer.bindShader(shader);\r\n        this._globalMat = this._globalMat || new PIXI.Matrix();\r\n        renderer._activeRenderTarget.projectionMatrix.copy(this._globalMat).append(this.worldTransform);\r\n        shader.uniforms.projectionMatrix = this._globalMat.toArray(true);\r\n        shader.uniforms.shadowColor = this.shadowColor;\r\n        shader.uniforms.alpha = alpha;\r\n        if (this.useSquare) {\r\n            var tempScale = this._tempScale = (this._tempScale || [0, 0]);\r\n            tempScale[0] = this._globalMat.a >= 0 ? 1 : -1;\r\n            tempScale[1] = this._globalMat.d < 0 ? 1 : -1;\r\n            var ps = shader.uniforms.pointScale = tempScale;\r\n            shader.uniforms.projectionScale = Math.abs(this.worldTransform.a) * renderer.resolution;\r\n        }\r\n        var af = shader.uniforms.animationFrame = renderer.plugins.tilemap.tileAnim;\r\n        var layers = this.children;\r\n        for (var i = 0; i < layers.length; i++) {\r\n            layers[i].renderWebGL(renderer, this.useSquare);\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/TiledTileLayer.js","const GLBuffer = PIXI.glCore.GLBuffer;\r\nconst VertexArrayObject = PIXI.glCore.VertexArrayObject;\r\n\r\nvar squareShaderFrag = `\r\nvarying vec2 vTextureCoord;\r\nvarying float vSize;\r\nvarying float vTextureId;\r\n\r\nuniform vec4 shadowColor;\r\nuniform sampler2D uSamplers[%count%];\r\nuniform vec2 uSamplerSize[%count%];\r\nuniform vec2 pointScale;\r\nuniform float alpha;\r\n\r\nvoid main(void){\r\n   float margin = 0.5 / vSize;\r\n   vec2 pointCoord = (gl_PointCoord - 0.5) * pointScale + 0.5;\r\n   vec2 clamped = vec2(clamp(pointCoord.x, margin, 1.0 - margin), clamp(pointCoord.y, margin, 1.0 - margin));\r\n   vec2 textureCoord = pointCoord * vSize + vTextureCoord;\r\n   float textureId = vTextureId;\r\n   vec4 color;\r\n   %forloop%\r\n   gl_FragColor = color * alpha;\r\n}\r\n`\r\n\r\nvar squareShaderVert = `\r\nattribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\nattribute vec2 aAnim;\r\nattribute float aTextureId;\r\nattribute float aSize;\r\n\r\nuniform mat3 projectionMatrix;\r\nuniform vec2 samplerSize;\r\nuniform vec2 animationFrame;\r\nuniform float projectionScale;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vSize;\r\nvarying float vTextureId;\r\n\r\nvoid main(void){\r\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition + aSize * 0.5, 1.0)).xy, 0.0, 1.0);\r\n   gl_PointSize = aSize * projectionScale;\r\n   vTextureCoord = aTextureCoord + aAnim * animationFrame;\r\n   vTextureId = aTextureId;\r\n   vSize = aSize;\r\n}\r\n`\r\nvar rectShaderFrag = `\r\nvarying vec2 vTextureCoord;\r\nvarying vec4 vFrame;\r\nvarying float vTextureId;\r\nuniform vec4 shadowColor;\r\nuniform sampler2D uSamplers[%count%];\r\nuniform vec2 uSamplerSize[%count%];\r\nuniform float alpha;\r\nvoid main(void){\r\n   vec2 textureCoord = clamp(vTextureCoord, vFrame.xy, vFrame.zw);\r\n   float textureId = floor(vTextureId + 0.5);\r\n   vec4 color;\r\n   %forloop%\r\n   gl_FragColor = color * alpha;\r\n}\r\n`;\r\n\r\nvar rectShaderVert = `\r\nattribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\nattribute vec4 aFrame;\r\nattribute vec2 aAnim;\r\nattribute float aTextureId;\r\nuniform mat3 projectionMatrix;\r\nuniform vec2 animationFrame;\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vFrame;\r\nvoid main(void){\r\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n   vec2 anim = aAnim * animationFrame;\r\n   vTextureCoord = aTextureCoord + anim;\r\n   vFrame = aFrame + vec4(anim, anim);\r\n   vTextureId = aTextureId;\r\n}\r\n`;\r\nexport default class TiledTileShader extends PIXI.tilemap.TilemapShader {\r\n\r\n    constructor(gl, maxTextures, useSquare) {\r\n        let vert = useSquare ? squareShaderVert : rectShaderVert;\r\n        let frag = useSquare ? squareShaderFrag : rectShaderFrag;\r\n        super(gl,\r\n            maxTextures,\r\n            vert,\r\n            PIXI.tilemap.shaderGenerator.generateFragmentSrc(maxTextures, frag)\r\n        );\r\n        if(useSquare) {\r\n            this.vertSize = 8;\r\n            this.vertPerQuad = 1;\r\n            this.anim = 5;\r\n            this.textureId = 7;\r\n        } else {\r\n            this.vertSize = 11;\r\n            this.vertPerQuad = 4;\r\n            this.anim = 8;\r\n            this.textureId = 10;\r\n        }\r\n        this.maxTextures = maxTextures;\r\n        this.stride = this.vertSize * 4;\r\n        PIXI.tilemap.shaderGenerator.fillSamplers(this, this.maxTextures);\r\n    }\r\n\r\n    createVao(renderer, vb) {\r\n        var gl = renderer.gl;\r\n        return renderer.createVao()\r\n            .addIndex(this.indexBuffer)\r\n            .addAttribute(vb, this.attributes.aVertexPosition, gl.FLOAT, false, this.stride, 0)\r\n            .addAttribute(vb, this.attributes.aTextureCoord, gl.FLOAT, false, this.stride, 2 * 4)\r\n            .addAttribute(vb, this.attributes.aFrame, gl.FLOAT, false, this.stride, 4 * 4)\r\n            .addAttribute(vb, this.attributes.aAnim, gl.FLOAT, false, this.stride, this.anim * 4)\r\n            .addAttribute(vb, this.attributes.aTextureId, gl.FLOAT, false, this.stride, this.textureId * 4);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/TiledTileShader.js","// Constants\r\nlet pluginParams = PluginManager.parameters(\"YED_Tiled\");\r\n\r\nObject.defineProperty(Game_Map.prototype, 'tiledData', {\r\n    get: function () {\r\n        return DataManager._tempTiledData;\r\n    },\r\n    configurable: true\r\n});\r\n\r\nObject.defineProperty(Game_Map.prototype, 'currentMapLevel', {\r\n    get: function () {\r\n        let varID = parseInt(pluginParams[\"Map Level Variable\"]);\r\n        if (!varID) {\r\n            return this._currentMapLevel;\r\n        } else {\r\n            return $gameVariables.value(varID);\r\n        }\r\n    },\r\n    set: function (value) {\r\n        let varID = parseInt(pluginParams[\"Map Level Variable\"]);\r\n        if (!varID) {\r\n            this._currentMapLevel = value;\r\n        } else {\r\n            $gameVariables.setValue(varID, value);\r\n        }\r\n    },\r\n    configurable: true\r\n});\r\n\r\nlet _setup = Game_Map.prototype.setup;\r\nGame_Map.prototype.setup = function (mapId) {\r\n    _setup.call(this, mapId);\r\n    this._collisionMap = {};\r\n    this._arrowCollisionMap = {};\r\n    this._regions = {};\r\n    this._mapLevelChange = {};\r\n    this._positionHeightChange = {};\r\n    this._tileFlags = {};\r\n    this._collisionMapLayers = [];\r\n    this._arrowCollisionMapLayers = [];\r\n    this._regionsLayers = [];\r\n    this._mapLevelChangeLayers = [];\r\n    this._positionHeightChangeLayers = [];\r\n    this._tileFlagsLayers = [];\r\n    this._currentMapLevel = 0;\r\n    this.currentMapLevel = 0;\r\n    if (this.isTiledMap()) {\r\n        $dataMap.width = this.tiledData.width;\r\n        $dataMap.height = this.tiledData.height;\r\n        this._setupTiled();\r\n        this._tiledInitialized = true;\r\n        if(this._refreshList) {\r\n            this._refreshList.forEach(character => {\r\n                character.refreshBushDepth();\r\n            })\r\n        }\r\n    }\r\n};\r\n\r\nGame_Map.prototype.isTiledInitialized = function() {\r\n    return !!this._tiledInitialized;\r\n}\r\n\r\nGame_Map.prototype.setRefreshDepth = function(character) {\r\n    if(!this._refreshList) {\r\n        this._refreshList = [];\r\n    }\r\n    this._refreshList.push(character);\r\n}\r\n\r\nGame_Map.prototype.isTiledMap = function () {\r\n    return !!this.tiledData;\r\n};\r\n\r\nGame_Map.prototype._setupTiled = function () {\r\n    this._convertChunks();\r\n    this._initializeMapLevel(0);\r\n\r\n    this._setupCollision();\r\n    this._setupRegion();\r\n    this._setupMapLevelChange();\r\n    this._setupTileFlags();\r\n    this._setupTiledEvents();\r\n};\r\n\r\nGame_Map.prototype._convertChunks = function() {\r\n    for (let idx = 0; idx < this.tiledData.layers.length; idx++) {\r\n        let layerData = this.tiledData.layers[idx];\r\n        if(!layerData.data && !!layerData.chunks) {\r\n            layerData.data = new Array(this.width() * this.height());\r\n            layerData.data.fill(0);\r\n            layerData.chunks.forEach(chunk => {\r\n                for(let i = 0; i < chunk.data.length; i++) {\r\n                    let x = chunk.x + (i % chunk.width);\r\n                    let y = chunk.y + Math.floor(i / chunk.width);\r\n                    if(x >= layerData.x + this.width() || y >= layerData.x + this.width()) {\r\n                        continue;\r\n                    }\r\n                    let realX = x + y * this.width();\r\n                    layerData.data[realX] = chunk.data[i];\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nGame_Map.prototype._initializeMapLevel = function (id) {\r\n    if (!!this._collisionMap[id]) {\r\n        return;\r\n    }\r\n\r\n    this._collisionMap[id] = {};\r\n    this._arrowCollisionMap[id] = {};\r\n    this._regions[id] = {};\r\n    this._mapLevelChange[id] = {};\r\n    this._tileFlags[id] = {};\r\n    this._collisionMapLayers[id] = [];\r\n    this._arrowCollisionMapLayers[id] = [];\r\n    this._regionsLayers[id] = [];\r\n    this._mapLevelChangeLayers[id] = [];\r\n    this._tileFlagsLayers[id] = [];\r\n    this._initializeMapLevelData(id);\r\n};\r\n\r\nGame_Map.prototype._initializeMapLevelData = function(id = 0, layerId = 'main', dataTypes = false) {\r\n    let width = this.width();\r\n    let height = this.height();\r\n    let size = width * height;\r\n    \r\n    const defaultData = {\r\n        'collisionMap': 0,\r\n        'arrowCollisionMap': 1 | 2 | 4 | 8,\r\n        'regions': 0,\r\n        'mapLevelChange': -1,\r\n        'positionHeightChange': -1,\r\n        'tileFlags': 0\r\n    }\r\n\r\n    if(!dataTypes) {\r\n        dataTypes = Object.keys(defaultData);\r\n    }\r\n\r\n    for(let idx = 0; idx < dataTypes.length; idx++) {\r\n        let dataType = dataTypes[idx];\r\n        let defaultValue = defaultData[dataType];\r\n        if(!this['_' + dataType][id]) {\r\n            this['_' + dataType][id] = {};\r\n            this['_' + dataType + 'Layers'][id] = [];\r\n        }\r\n        if(!!this['_' + dataType][id][layerId]) {\r\n            continue;\r\n        }\r\n        this['_' + dataType][id][layerId] = []\r\n        let typeData = this['_' + dataType][id][layerId]\r\n        for (let x of Array(size).keys()) {\r\n            typeData.push(defaultValue);\r\n        }\r\n    }\r\n}\r\n\r\nGame_Map.prototype._setupCollision = function () {\r\n    this._setupCollisionFull();\r\n    this._setupCollisionArrow();\r\n};\r\n\r\nGame_Map.prototype._setupCollisionFull = function () {\r\n    let width = this.width();\r\n    let height = this.height();\r\n    let size = width * height;\r\n    let halfWidth = width / 2;\r\n    let halfHeight = height / 2;\r\n\r\n    if (this.isHalfTile()) {\r\n        size /= 4;\r\n    }\r\n\r\n    for (let idx = 0; idx < this.tiledData.layers.length; idx++) {\r\n        let layerData = this.tiledData.layers[idx]\r\n        if (!layerData.properties || !layerData.properties.collision) {\r\n            continue;\r\n        }\r\n\r\n        if (layerData.properties.collision !== \"full\"\r\n            && layerData.properties.collision !== \"up-left\"\r\n            && layerData.properties.collision !== \"up-right\"\r\n            && layerData.properties.collision !== \"down-left\"\r\n            && layerData.properties.collision !== \"down-right\"\r\n            && layerData.properties.collision !== \"tiles\") {\r\n            continue;\r\n        }\r\n\r\n        let level = parseInt(layerData.properties.level) || 0;\r\n        this._initializeMapLevel(level);\r\n        \r\n        let layerId = 'main';\r\n\r\n        if(TiledManager.hasHideProperties(layerData)) {\r\n            layerId = idx;\r\n            this._collisionMapLayers[level].push(idx);\r\n            this._initializeMapLevelData(level, layerId, ['collisionMap']);\r\n        }\r\n        \r\n        for (let x of Array(size).keys()) {\r\n            let realX = x;\r\n            let ids = [];\r\n            if (this.isHalfTile()) {\r\n                realX = Math.floor(x / halfWidth) * width * 2 + (x % halfWidth) * 2;\r\n            }\r\n            if (!!layerData.data[x]) {\r\n                switch(layerData.properties.collision) {\r\n                    case \"full\":\r\n                        ids.push(realX);\r\n                        if (this.isHalfTile()) {\r\n                            ids.push(realX + 1, realX + width, realX + width + 1);\r\n                        }\r\n                        break;\r\n                    case \"up-left\":\r\n                        ids.push(realX);\r\n                        break;\r\n                    case \"up-right\":\r\n                        ids.push(realX + 1);\r\n                        break;\r\n                    case \"down-left\":\r\n                        ids.push(realX + width);\r\n                        break;\r\n                    case \"down-right\":\r\n                        ids.push(realX + width + 1);\r\n                        break;\r\n                    case \"tiles\":\r\n                        let tileId = layerData.data[x];\r\n                        let tileset = this._getTileset(tileId);\r\n                        if(tileset && tileset.tileproperties) {\r\n                            let tileData = tileset.tileproperties[tileId - tileset.firstgid];\r\n                            if(tileData) {\r\n                                if(tileData.collision) {\r\n                                    ids.push(realX);\r\n                                    if (this.isHalfTile()) {\r\n                                        ids.push(realX + 1, realX + width, realX + width + 1);\r\n                                    }\r\n                                }\r\n                                if(tileData.collisionUpLeft) {\r\n                                    ids.push(realX);\r\n                                }\r\n                                if(tileData.collisionUpRight) {\r\n                                    ids.push(realX + 1);\r\n                                }\r\n                                if(tileData.collisionDownLeft) {\r\n                                    ids.push(realX + width);\r\n                                }\r\n                                if(tileData.collisionDownRight) {\r\n                                    ids.push(realX + width + 1);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n                for (let id of ids) {\r\n                    this._collisionMap[level][layerId][id] = 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nGame_Map.prototype._setupCollisionArrow = function () {\r\n    let width = this.width();\r\n    let height = this.height();\r\n    let size = width * height;\r\n    let bit = 0;\r\n    let halfWidth = width / 2;\r\n    let halfHeight = height / 2;\r\n\r\n    if (this.isHalfTile()) {\r\n        size /= 4;\r\n    }\r\n\r\n    for (let idx = 0; idx < this.tiledData.layers.length; idx++) {\r\n        let layerData = this.tiledData.layers[idx]\r\n        if (!layerData.properties || !layerData.properties.collision) {\r\n            continue;\r\n        }\r\n\r\n        if (layerData.properties.collision !== \"arrow\" && layerData.properties.collision !== \"tiles\") {\r\n            continue;\r\n        }\r\n\r\n        if (!layerData.properties.arrowImpassable && layerData.properties.collision !== \"tiles\") {\r\n            continue;\r\n        }\r\n        \r\n        if(layerData.properties.arrowImpassable) {\r\n\r\n            if (layerData.properties.arrowImpassable === \"down\") {\r\n                bit = 1;\r\n            }\r\n\r\n            if (layerData.properties.arrowImpassable === \"left\") {\r\n                bit = 2;\r\n            }\r\n\r\n            if (layerData.properties.arrowImpassable === \"right\") {\r\n                bit = 4;\r\n            }\r\n\r\n            if (layerData.properties.arrowImpassable === \"up\") {\r\n                bit = 8;\r\n            }\r\n\r\n\r\n        }\r\n\r\n        let level = parseInt(layerData.properties.level) || 0;\r\n        this._initializeMapLevel(level);\r\n        \r\n        let layerId = 'main';\r\n\r\n        if(TiledManager.hasHideProperties(layerData)) {\r\n            layerId = idx;\r\n            this._arrowCollisionMapLayers[level].push(idx);\r\n            this._initializeMapLevelData(level, layerId, ['arrowCollisionMap']);\r\n        }\r\n        \r\n        let arrowCollisionMap = this._arrowCollisionMap[level][layerId];\r\n        for (let x of Array(size).keys()) {\r\n            let realX = x;\r\n            if (this.isHalfTile()) {\r\n                realX = Math.floor(x / halfWidth) * width * 2 + (x % halfWidth) * 2;\r\n            }\r\n\r\n            if (!!layerData.data[x]) {\r\n                let realBit = bit;\r\n                if(layerData.properties.collision === \"tiles\") {\r\n                    realBit = 0;\r\n                    let tileId = layerData.data[x];\r\n                    let tileset = this._getTileset(tileId);\r\n                    if(tileset && tileset.tileproperties) {\r\n                        let tileData = tileset.tileproperties[tileId - tileset.firstgid];\r\n                        if(tileData) {\r\n                            if(tileData.arrowImpassableDown) {\r\n                                realBit+= 1;\r\n                            }\r\n                            if(tileData.arrowImpassableLeft) {\r\n                                realBit+= 2;\r\n                            }\r\n                            if(tileData.arrowImpassableRight) {\r\n                                realBit+= 4;\r\n                            }\r\n                            if(tileData.arrowImpassableUp) {\r\n                                realBit+= 8;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                arrowCollisionMap[realX] = arrowCollisionMap[realX] ^ realBit;\r\n                if (this.isHalfTile()) {\r\n                    arrowCollisionMap[realX + 1]\r\n                        = arrowCollisionMap[realX + 1] ^ realBit;\r\n                    arrowCollisionMap[realX + width]\r\n                        = arrowCollisionMap[realX + width] ^ realBit;\r\n                    arrowCollisionMap[realX + width + 1]\r\n                        = arrowCollisionMap[realX + width + 1] ^ realBit;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nGame_Map.prototype._setupRegion = function () {\r\n    let width = this.width();\r\n    let height = this.height();\r\n    let size = width * height;\r\n    let halfWidth = width / 2;\r\n    let halfHeight = height / 2;\r\n\r\n    if (this.isHalfTile()) {\r\n        size /= 4;\r\n    }\r\n\r\n    for (let idx = 0; idx < this.tiledData.layers.length; idx++) {\r\n        let layerData = this.tiledData.layers[idx]\r\n        if (!layerData.properties || !layerData.properties.regionId) {\r\n            continue;\r\n        }\r\n\r\n        let level = parseInt(layerData.properties.level) || 0;\r\n        this._initializeMapLevel(level);\r\n        \r\n        let layerId = 'main';\r\n\r\n        if(TiledManager.hasHideProperties(layerData)) {\r\n            layerId = idx;\r\n            this._regionsLayers[level].push(idx);\r\n            this._initializeMapLevelData(level, layerId, ['regions']);\r\n        }\r\n        \r\n        let regionMap = this._regions[level][layerId];\r\n\r\n        for (let x of Array(size).keys()) {\r\n            let realX = x;\r\n            if (this.isHalfTile()) {\r\n                realX = Math.floor(x / halfWidth) * width * 2 + (x % halfWidth) * 2;\r\n            }\r\n\r\n            if (!!layerData.data[x]) {\r\n                let regionId = 0;\r\n                if(layerData.properties.regionId > -1) {\r\n                    regionId = parseInt(layerData.properties.regionId);\r\n                } else {\r\n                    let tileId = layerData.data[x];\r\n                    let tileset = this._getTileset(tileId);\r\n                    if(tileset && tileset.tileproperties) {\r\n                        let tileData = tileset.tileproperties[tileId - tileset.firstgid];\r\n                        if(tileData && tileData.regionId) {\r\n                            regionId = parseInt(tileData.regionId);\r\n                        }\r\n                    }\r\n                    if(layerData.properties.regionOffset) {\r\n                        regionId+= layerData.properties.regionOffset;\r\n                    }\r\n                }\r\n                regionMap[realX] = regionId;\r\n                if (this.isHalfTile()) {\r\n                    regionMap[realX + 1] = regionId;\r\n                    regionMap[realX + width] = regionId;\r\n                    regionMap[realX + width + 1] = regionId;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nGame_Map.prototype._setupMapLevelChange = function () {\r\n    let width = this.width();\r\n    let height = this.height();\r\n    let size = width * height;\r\n    let halfWidth = width / 2;\r\n    let halfHeight = height / 2;\r\n\r\n    if (this.isHalfTile()) {\r\n        size /= 4;\r\n    }\r\n\r\n    for (let idx = 0; idx < this.tiledData.layers.length; idx++) {\r\n        let layerData = this.tiledData.layers[idx]\r\n        if (!layerData.properties || !layerData.properties.hasOwnProperty('toLevel')) {\r\n            continue;\r\n        }\r\n\r\n        let level = parseInt(layerData.properties.level) || 0;\r\n        this._initializeMapLevel(level);\r\n        let layerId = 'main';\r\n\r\n        if(TiledManager.hasHideProperties(layerData)) {\r\n            layerId = idx;\r\n            this._mapLevelChangeLayers[level].push(idx);\r\n            this._initializeMapLevelData(level, layerId, ['mapLevelChange']);\r\n        }\r\n        \r\n        let levelChangeMap = this._mapLevelChange[level][layerId];\r\n\r\n        for (let x of Array(size).keys()) {\r\n            let realX = x;\r\n            let toLevel = parseInt(layerData.properties.toLevel);\r\n            if (this.isHalfTile()) {\r\n                realX = Math.floor(x / halfWidth) * width * 2 + (x % halfWidth) * 2;\r\n            }\r\n\r\n            if (!!layerData.data[x]) {\r\n                levelChangeMap[realX] = toLevel;\r\n                if (this.isHalfTile()) {\r\n                    levelChangeMap[realX + 1] = toLevel;\r\n                    levelChangeMap[realX + width] = toLevel;\r\n                    levelChangeMap[realX + width + 1] = toLevel;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nGame_Map.prototype._setupPositionHeightChange = function () {\r\n    let width = this.width();\r\n    let height = this.height();\r\n    let size = width * height;\r\n    let halfWidth = width / 2;\r\n    let halfHeight = height / 2;\r\n\r\n    if (this.isHalfTile()) {\r\n        size /= 4;\r\n    }\r\n\r\n    for (let idx = 0; idx < this.tiledData.layers.length; idx++) {\r\n        let layerData = this.tiledData.layers[idx]\r\n        if (!layerData.properties || !layerData.properties.hasOwnProperty('floorHeight')) {\r\n            continue;\r\n        }\r\n\r\n        let level = parseInt(layerData.properties.level) || 0;\r\n        this._initializeMapLevel(level);\r\n        let layerId = 'main';\r\n\r\n        if(TiledManager.hasHideProperties(layerData)) {\r\n            layerId = idx;\r\n            this._positionHeightChangeLayers[level].push(idx);\r\n            this._initializeMapLevelData(level, layerId, ['positionHeightChange']);\r\n        }\r\n        \r\n        let positionHeightChangeMap = this._positionHeightChange[level][layerId];\r\n\r\n        for (let x of Array(size).keys()) {\r\n            let realX = x;\r\n            let toLevel = parseInt(layerData.properties.floorHeight);\r\n            if (this.isHalfTile()) {\r\n                realX = Math.floor(x / halfWidth) * width * 2 + (x % halfWidth) * 2;\r\n            }\r\n\r\n            if (!!layerData.data[x]) {\r\n                positionHeightChangeMap[realX] = toLevel;\r\n                if (this.isHalfTile()) {\r\n                    positionHeightChangeMap[realX + 1] = toLevel;\r\n                    positionHeightChangeMap[realX + width] = toLevel;\r\n                    positionHeightChangeMap[realX + width + 1] = toLevel;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nGame_Map.prototype._setupTileFlags = function() {\r\n    let width = this.width();\r\n    let height = this.height();\r\n    let size = width * height;\r\n    let halfWidth = width / 2;\r\n    let halfHeight = height / 2;\r\n\r\n    if (this.isHalfTile()) {\r\n        size /= 4;\r\n    }\r\n    \r\n    for (let idx = 0; idx < this.tiledData.layers.length; idx++) {\r\n        let layerData = this.tiledData.layers[idx]\r\n        if (!layerData.properties || !layerData.properties.tileFlags) {\r\n            continue;\r\n        }\r\n\r\n        let level = parseInt(layerData.properties.level) || 0;\r\n        this._initializeMapLevel(level);\r\n        \r\n        let layerId = 'main';\r\n\r\n        if(TiledManager.hasHideProperties(layerData)) {\r\n            layerId = idx;\r\n            this._tileFlagsLayers[level].push(idx);\r\n            this._initializeMapLevelData(level, layerId, ['tileFlags']);\r\n        }\r\n        \r\n        let tileFlagMap = this._tileFlags[level][layerId];\r\n\r\n        for (let x of Array(size).keys()) {\r\n            let realX = x;\r\n            if (this.isHalfTile()) {\r\n                realX = Math.floor(x / halfWidth) * width * 2 + (x % halfWidth) * 2;\r\n            }\r\n\r\n            if (!!layerData.data[x]) {\r\n                let tileFlags = 0;\r\n                let tileId = layerData.data[x];\r\n                let tileset = this._getTileset(tileId);\r\n                if(tileset && tileset.tileproperties) {\r\n                    let tileData = tileset.tileproperties[tileId - tileset.firstgid];\r\n                    if(tileData) {\r\n                        tileFlags = this._getTileFlags(tileData);\r\n                    }\r\n                }\r\n                tileFlagMap[realX] = this._combineFlags(tileFlagMap[realX], tileFlags);\r\n                if (this.isHalfTile()) {\r\n                    tileFlagMap[realX + 1] = this._combineFlags(tileFlagMap[realX + 1], tileFlags);\r\n                    tileFlagMap[realX + width] = this._combineFlags(tileFlagMap[realX + width], tileFlags);\r\n                    tileFlagMap[realX + width + 1] = this._combineFlags(tileFlagMap[realX + width + 1], tileFlags);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nGame_Map.prototype._getTileFlags = function(tileData) {\r\n    let flags = []\r\n    let flagNames = TiledManager.getFlagNames()\r\n    flagNames.forEach(prop => {\r\n        let property = 'flagIs' + prop.slice(0, 1).toUpperCase() + prop.slice(1)\r\n        if(tileData[property]) {\r\n            let [group, bit] = TiledManager.getFlagLocation(prop)\r\n            for(let i = flags.length; i <= group; i++) {\r\n                flags.push(0)\r\n            }\r\n            flags[group]|= bit\r\n        }\r\n    })\r\n    return flags.length > 0 ? flags : 0\r\n}\r\n\r\nGame_Map.prototype._combineFlags = function (source, target) {\r\n    source = source ? source.slice(0) : []\r\n    for(let i = 0; i < target.length; i++) {\r\n        if(!source.length <= i) {\r\n            source.push(i)\r\n        }\r\n        source[i]|= target[i];\r\n    }\r\n    return source;\r\n}\r\n\r\nGame_Map.prototype._setupTiledEvents = function () {\r\n    for (let layerData of this.tiledData.layers) {\r\n        if (layerData.type !== \"objectgroup\") {\r\n            continue;\r\n        }\r\n\r\n        for (let object of layerData.objects) {\r\n            if (!object.properties) {\r\n                continue;\r\n            }\r\n\r\n            if (!object.properties.eventId && !object.properties.vehicle) {\r\n                continue;\r\n            }\r\n\r\n            let event;\r\n\r\n            if(!!object.properties.vehicle) {\r\n                event = this.vehicle(object.properties.vehicle);\r\n            } else {\r\n                let eventId = parseInt(object.properties.eventId);\r\n                event = this._events[eventId];\r\n            }\r\n            if (!event) {\r\n                continue;\r\n            }\r\n            let x = object.x / this.tileWidth();\r\n            let y = object.y / this.tileHeight();\r\n            if(pluginParams[\"Constrain Events to Grid\"].toLowerCase() === \"true\") {\r\n                x = Math.floor(x);\r\n                y = Math.floor(y);\r\n            }\r\n            if (this.isHalfTile()) {\r\n                x += 1;\r\n                y += 1;\r\n            }\r\n            if(!!object.properties.vehicle) {\r\n                event.setLocation(this.mapId(), x, y);\r\n            } else {\r\n                event.locate(x, y);\r\n            }\r\n\t\t\tevent._tiledProperties = object.properties;\r\n        }\r\n    }\r\n};\r\n\r\nGame_Map.prototype.isHalfTile = function () {\r\n    return pluginParams[\"Half-tile movement\"].toLowerCase() === \"true\";\r\n};\r\n\r\nGame_Map.prototype._getTileset = function(tileId) {\r\n    for(let idx = 0; idx < this.tiledData.tilesets.length; idx++) {\r\n        let tileset = this.tiledData.tilesets[idx];\r\n        if(tileId >= tileset.firstgid && tileId < tileset.firstgid + tileset.tilecount) {\r\n            return tileset;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nGame_Map.prototype.tileWidth = function () {\r\n    let tileWidth = this.tiledData.tilewidth;\r\n    if (this.isHalfTile()) {\r\n        tileWidth /= 2;\r\n    }\r\n    return tileWidth;\r\n};\r\n\r\nGame_Map.prototype.tileHeight = function () {\r\n    let tileHeight = this.tiledData.tileheight;\r\n    if (this.isHalfTile()) {\r\n        tileHeight /= 2;\r\n    }\r\n    return tileHeight;\r\n};\r\n\r\nGame_Map.prototype.width = function () {\r\n    let width = this.tiledData.width;\r\n    if (this.isHalfTile()) {\r\n        width *= 2;\r\n    }\r\n    return width;\r\n};\r\n\r\nGame_Map.prototype.height = function () {\r\n    let height = this.tiledData.height;\r\n    if (this.isHalfTile()) {\r\n        height *= 2;\r\n    }\r\n    return height;\r\n};\r\n\r\nlet _regionId = Game_Map.prototype.regionId;\r\nGame_Map.prototype.regionId = function (x, y, allIds = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _regionId.call(this, x, y);\r\n    }\r\n\r\n    let index = x + this.width() * y;\r\n    let regionMap = this._regions[this.currentMapLevel];\r\n    let regionLayer = this._regionsLayers[this.currentMapLevel];\r\n    \r\n    let regionValue = regionMap.main[index];\r\n    let regionValues = [regionValue];\r\n\r\n    if(regionLayer && regionLayer.length > 0) {\r\n        for(let idx = 0; idx < regionLayer.length; idx++) {\r\n            let layerId = regionLayer[idx];\r\n            let layerData = this.tiledData.layers[layerId];\r\n            let hideData = TiledManager.checkLayerHidden(layerData, 'regions');\r\n            if(!hideData) {\r\n                if(allIds) {\r\n                    regionValues.push(regionMap[layerId][index]);\r\n                } else {\r\n                    regionValue = regionMap[layerId][index];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return allIds ? regionValues : regionValue;\r\n};\r\n\r\nGame_Map.prototype.regionIds = function (x, y) {\r\n    return this.regionId(x, y, true);\r\n}\r\n\r\nlet _checkPassage = Game_Map.prototype.checkPassage;\r\nGame_Map.prototype.checkPassage = function (x, y, bit, render = false, level = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _checkPassage.call(this, x, y, d);\r\n    }\r\n    if(level === false) {\r\n        level = this._currentMapLevel;\r\n    }\r\n    let index = x + this.width() * y;\r\n    let arrows = this._arrowCollisionMap[level];\r\n    let arrowLayer = this._arrowCollisionMapLayers[level];\r\n    let arrowValue = arrows.main[index];\r\n    \r\n    if(render && arrows[render]) {\r\n        arrowValue = arrows[render][index];\r\n    } else if(arrowLayer && arrowLayer.length > 0) {\r\n        for(let idx = 0; idx < arrowLayer.length; idx++) {\r\n            let layerId = arrowLayer[idx];\r\n            let layerData = this.tiledData.layers[layerId];\r\n            let hideData = TiledManager.checkLayerHidden(layerData, 'collisions');\r\n            if(!hideData) {\r\n                arrowValue&= arrows[layerId][index];\r\n            }\r\n        }\r\n    }\r\n\r\n    return (arrowValue & bit) > 0\r\n}\r\n\r\nGame_Map.prototype.renderPassage = function (x, y, bit, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    if(render && !this._arrowCollisionMap[level][render]) {\r\n        render = 'main';\r\n    }\r\n    return this.checkPassage(x, y, bit, render, level);\r\n}\r\n\r\nGame_Map.prototype.getPassageLayers = function(level) {\r\n    return this._arrowCollisionMapLayers[level].slice(0);\r\n}\r\n\r\nlet _isPassable = Game_Map.prototype.isPassable;\r\nGame_Map.prototype.isPassable = function (x, y, d, render = false, level = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _isPassable.call(this, x, y, d);\r\n    }\r\n    if(level === false) {\r\n        level = this._currentMapLevel;\r\n    }\r\n\r\n    if(!this.checkPassage(x, y, (1 << (d / 2 - 1)) & 0x0f, render)) {\r\n        return false;\r\n    }\r\n    \r\n    let index = x + this.width() * y;\r\n    let collisionMap = this._collisionMap[level];\r\n    let collisionLayer = this._collisionMapLayers[level];\r\n    let collisionValue = collisionMap.main[index]\r\n    \r\n    if(render && collisionMap[render]) {\r\n        collisionValue = collisionMap[render][index];\r\n    } else if(collisionLayer && collisionLayer.length > 0) {\r\n        for(let idx = 0; idx < collisionLayer.length; idx++) {\r\n            let layerId = collisionLayer[idx];\r\n            let layerData = this.tiledData.layers[layerId];\r\n            let hideData = TiledManager.checkLayerHidden(layerData, 'collisions');\r\n            if(!hideData) {\r\n                collisionValue|= collisionMap[layerId][index];\r\n            }\r\n        }\r\n    }\r\n\r\n    return collisionValue === 0;\r\n};\r\n\r\nGame_Map.prototype.renderIsPassable = function (x, y, d, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    if(render && !this._collisionMap[level][render]) {\r\n        render = 'main';\r\n    }\r\n    return this.isPassable(x, y, d, render, level);\r\n}\r\n\r\nGame_Map.prototype.getIsPassableLayers = function(level) {\r\n    return this._collisionMapLayers[level].slice(0);\r\n}\r\n\r\nGame_Map.prototype.checkMapLevelChanging = function (x, y) {\r\n    let mapLevelChange = this._mapLevelChange[this.currentMapLevel];\r\n    let mapLevelChangeLayer = this._mapLevelChangeLayers[this.currentMapLevel];\r\n    let index = y * this.width() + x;\r\n    let mapLevelChangeValue = mapLevelChange.main[index]\r\n    if(mapLevelChangeLayer.length > 0) {\r\n        for(let idx = 0; idx < mapLevelChangeLayer.length; idx++) {\r\n            let layerId = mapLevelChangeLayer[idx];\r\n            let layerData = this.tiledData.layers[layerId];\r\n            let hideData = TiledManager.checkLayerHidden(layerData, 'levelChanges');\r\n            if(!hideData) {\r\n                mapLevelChangeValue = mapLevelChange[layerId][index];\r\n            }\r\n        }\r\n    }\r\n    if (mapLevelChangeValue < 0) {\r\n        return false;\r\n    }\r\n    this.currentMapLevel = mapLevelChangeValue;\r\n    return true;\r\n};\r\n\r\nGame_Map.prototype.checkPositionHeight = function (x, y) {\r\n    let positionHeightChange = this._positionHeightChange[this.currentMapLevel];\r\n    let positionHeightChangeLayer = this._positionHeightChangeLayers[this.currentMapLevel];\r\n    let index = y * this.width() + x;\r\n    let positionHeightChangeValue = positionHeightChange.main[index]\r\n    if(positionHeightChangeLayer.length > 0) {\r\n        for(let idx = 0; idx < positionHeightChangeLayer.length; idx++) {\r\n            let layerId = positionHeightChangeLayer[idx];\r\n            let layerData = this.tiledData.layers[layerId];\r\n            let hideData = TiledManager.checkLayerHidden(layerData, 'positionHeightChanges');\r\n            if(!hideData) {\r\n                positionHeightChangeValue = positionHeightChange[layerId][index];\r\n            }\r\n        }\r\n    }\r\n    return positionHeightChangeValue;\r\n};\r\n\r\nGame_Map.prototype.getTileFlags = function (x, y, render = false, level = false) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    let index = x + this.width() * y;\r\n    let tileFlags = this._tileFlags[level];\r\n    let tileFlagsLayer = this._tileFlagsLayers[level];\r\n    let tileFlagsValue = (tileFlags.main[index] ? tileFlags.main[index].slice(0) : []);\r\n\r\n    if(render && tileFlags[render]) {\r\n        tileFlagsValue = (tileFlags[render][index] ? tileFlags[render][index].slice(0) : []);\r\n    } else if(tileFlagsLayer && tileFlagsLayer.length > 0) {\r\n        for(let idx = 0; idx < tileFlagsLayer.length; idx++) {\r\n            let layerId = tileFlagsLayer[idx];\r\n            let layerData = this.tiledData.layers[layerId];\r\n            let hideData = TiledManager.checkLayerHidden(layerData, 'tileFlags');\r\n            if(!hideData && tileFlags[layerId][index]) {\r\n                tileFlagsValue = this._combineFlags(tileFlagsValue, tileFlags[layerId][index])\r\n            }\r\n        }\r\n    }\r\n    return tileFlagsValue\r\n}\r\n\r\nGame_Map.prototype.renderTileFlags = function (x, y, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    if(render && !this._tileFlags[level][render]) {\r\n        render = 'main';\r\n    }\r\n    return this.getTileFlags(x, y, render, level);\r\n}\r\n\r\nGame_Map.prototype.checkHasTileFlag = function (x, y, flag, render = false, level = false) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    if(typeof flag === 'string') {\r\n        flag = TiledManager.getFlag(flag)\r\n    }\r\n    let bit = (1 << (flag % 16)) & 0xffff;\r\n    let group = Math.floor(flag / 16);\r\n    let tileFlagsValue = this.getTileFlags(x, y, render, level);\r\n    \r\n    return (tileFlagsValue[group] & bit) > 0\r\n}\r\n\r\nGame_Map.prototype.renderHasTileFlag = function (x, y, flag, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    if(render && !this._tileFlags[level][render]) {\r\n        render = 'main';\r\n    }\r\n    return this.checkHasTileFlag(x, y, flag, render, level);\r\n}\r\n\r\nlet _isBoatPassable = Game_Map.prototype.isBoatPassable\r\nGame_Map.prototype.isBoatPassable = function(x, y, render = false, level = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _isBoatPassable.call(this, x, y);\r\n    }\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.checkHasTileFlag(x, y, 'boat', render, level);\r\n};\r\n\r\nGame_Map.prototype.renderIsBoatPassable = function(x, y, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isBoatPassable(x, y, render, level);\r\n}\r\n\r\nlet _isShipPassable = Game_Map.prototype.isShipPassable\r\nGame_Map.prototype.isShipPassable = function(x, y, render = false, level = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _isShipPassable.call(this, x, y);\r\n    }\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.checkHasTileFlag(x, y, 'ship', render);\r\n};\r\n\r\nGame_Map.prototype.renderIsShipPassable = function(x, y, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isShipPassable(x, y, render, level);\r\n}\r\n\r\nlet _isAirshipLandOk = Game_Map.prototype.isAirshipLandOk\r\nGame_Map.prototype.isAirshipLandOk = function(x, y, render = false, level = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _isAirshipLandOk.call(this, x, y);\r\n    }\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.checkHasTileFlag(x, y, 'airship', render) && this.checkPassage(x, y, 0x0f, render);\r\n};\r\n\r\nGame_Map.prototype.renderIsAirshipLandOk = function(x, y, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isAirshipLandOk(x, y, render, level);\r\n}\r\n\r\nlet _isLadder = Game_Map.prototype.isLadder\r\nGame_Map.prototype.isLadder = function(x, y, render = false, level = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _isLadder.call(this, x, y);\r\n    }\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isValid(x, y) && this.checkHasTileFlag(x, y, 'ladder', render);\r\n};\r\n\r\nGame_Map.prototype.renderIsLadder = function(x, y, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isLadder(x, y, render, level);\r\n}\r\n\r\nlet _isBush = Game_Map.prototype.isBush\r\nGame_Map.prototype.isBush = function(x, y, render = false, level = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _isBush.call(this, x, y);\r\n    }\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isValid(x, y) && this.checkHasTileFlag(x, y, 'bush', render);\r\n};\r\n\r\nGame_Map.prototype.renderIsBush = function(x, y, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isBush(x, y, render, level);\r\n}\r\n\r\nlet _isCounter = Game_Map.prototype.isCounter\r\nGame_Map.prototype.isCounter = function(x, y, render = false, level = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _isCounter.call(this, x, y);\r\n    }\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isValid(x, y) && this.checkHasTileFlag(x, y, 'counter', render);\r\n};\r\n\r\nGame_Map.prototype.renderIsCounter = function(x, y, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isCounter(x, y, render, level);\r\n}\r\n\r\nlet _isDamageFloor = Game_Map.prototype.isDamageFloor\r\nGame_Map.prototype.isDamageFloor = function(x, y, render = false, level = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _isDamageFloor.call(this, x, y);\r\n    }\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isValid(x, y) && this.checkHasTileFlag(x, y, 'damage', render);\r\n};\r\n\r\nGame_Map.prototype.renderIsDamageFloor = function(x, y, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isDamageFloor(x, y, render, level);\r\n}\r\n\r\nGame_Map.prototype.isSlipperyFloor = function(x, y, render = false, level = false) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isValid(x, y) && this.checkHasTileFlag(x, y, 'ice', render);\r\n};\r\n\r\nGame_Map.prototype.renderIsSlipperyFloor = function(x, y, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isSlipperyFloor(x, y, render, level);\r\n}\r\n\r\nGame_Map.prototype.getLayerProperties = function(layer = -1, ignoreHidden = true) {\r\n\tif(layer > -1) {\r\n\t\tif(this.tiledData.layers[layer] && this.tiledData.layers[layer].properties) {\r\n\t\t\treturn Object.assign({}, this.tiledData.layers[layer].properties);\r\n\t\t}\r\n\t\treturn {};\r\n\t}\r\n\tlet layerProperties = {};\r\n\tthis.tiledData.layers.forEach((layerData, i) => {\r\n\t\tif(layerData && layerData.properties) {\r\n            if(!ignoreHidden || !TiledManager.checkLayerHidden(layerData, 'collisions')) {\r\n                layerProperties[i] = Object.assign({}, layerData.properties);\r\n            }\r\n\t\t}\r\n\t});\r\n\treturn layerProperties;\r\n}\r\n\r\nGame_Map.prototype.getTileProperties = function(x, y, layer = -1, ignoreHidden = true) {\r\n    let index = x + this.width() * y;\r\n    \r\n\tif(layer > -1) {\r\n\t\tif(this.tiledData.layers[layer]) {\r\n\t\t\tlet tileId = this.tiledData.layers[layer].data[x];\r\n\t\t\tlet tileset = this._getTileset(tileId);\r\n\t\t\tif(tileset && tileset.tileproperties) {\r\n\t\t\t\treturn Object.assign({}, tileset.tileproperties[tileId - tileset.firstgid]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {};\r\n\t}\r\n\tlet tileProperties = {};\r\n\tthis.tiledData.layers.forEach((layerData, i) => {\r\n\t\tif(layerData && layerData.properties) {\r\n            if(!ignoreHidden || !TiledManager.checkLayerHidden(layerData)) {\r\n                let props = this.getTileProperties(x, y, i);\r\n                if(Object.keys(props).length > 0) {\r\n                    tileProperties[i] = props;\r\n                }\r\n            }\r\n\t\t}\r\n\t});\r\n\treturn tileProperties;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Game_Map.js","let pluginParams = PluginManager.parameters(\"YED_Tiled\");\r\n\r\nGame_CharacterBase.prototype.screenZ = function () {\r\n    if (this._priorityType == 0) {\r\n        return parseInt(pluginParams[\"Z - Below Player\"]);\r\n    }\r\n    if (this._priorityType == 2) {\r\n        return parseInt(pluginParams[\"Z - Above Player\"]);\r\n    }\r\n    return parseInt(pluginParams[\"Z - Player\"]);\r\n};\r\n\r\nlet _distancePerFrame = Game_CharacterBase.prototype.distancePerFrame;\r\nGame_CharacterBase.prototype.distancePerFrame = function () {\r\n    let distance = _distancePerFrame.call(this);\r\n    return distance * (48 / Math.min($gameMap.tileWidth(), $gameMap.tileHeight()));\r\n};\r\n\r\nlet _refreshBushDepth = Game_CharacterBase.prototype.refreshBushDepth;\r\nGame_CharacterBase.prototype.refreshBushDepth = function() {\r\n    this._bushDepth = 0;\r\n    if(!$gameMap.isTiledMap() || $gameMap.isTiledInitialized()) {\r\n        _refreshBushDepth.call(this);\r\n    } else {\r\n        $gameMap.setRefreshDepth(this);\r\n    }\r\n};\r\n\r\nlet _updateMove = Game_CharacterBase.prototype.updateMove;\r\nGame_CharacterBase.prototype.updateMove = function() {\r\n    var hori = (this._realX > this._x ? 4 : (this._realX < this._x ? 6 : 0))\r\n    var vert = (this._realY > this._y ? 8 : (this._realY < this._y ? 2 : 0))\r\n    var d = hori + vert\r\n    _updateMove.call(this);\r\n    if(!this.isMoving() || pluginParams[\"Position Height - Always Check On Move Update\"].toLowerCase() === \"true\") {\r\n        let newLocationHeight = $gameMap.checkPositionHeight(this._x, this._y);\r\n        if(newLocationHeight > -1) {\r\n            this._locationHeight = newLocationHeight;\r\n        }\r\n    }\r\n    if(!this.isMoving() && $gameMap.isSlipperyFloor(this._x, this._y)) {\r\n        TiledManager.triggerListener(this, 'slipperyfloor', {\r\n            d\r\n        })\r\n    }\r\n}\r\n\r\nGame_CharacterBase.prototype.locationHeight = function() {\r\n\treturn this._locationHeight || 0\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Game_CharacterBase.js","let _checkEventTriggerHere = Game_Player.prototype.checkEventTriggerHere;\r\nGame_Player.prototype.checkEventTriggerHere = function (triggers) {\r\n    _checkEventTriggerHere.call(this, triggers);\r\n    this._checkMapLevelChangingHere();\r\n};\r\n\r\nGame_Player.prototype._checkMapLevelChangingHere = function () {\r\n    $gameMap.checkMapLevelChanging(this.x, this.y);\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Game_Player.js","let _update = Sprite_Character.prototype.update\r\nSprite_Character.prototype.update = function() {\r\n\t_update.call(this);\r\n\tthis.locationHeight = this._character.locationHeight();\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Sprite_Character.js","import { TiledTilemap } from \"./TiledTilemap\";\r\n\r\nlet _initialize = Spriteset_Battle.prototype.initialize\r\nSpriteset_Battle.prototype.initialize = function() {\r\n    this._parallaxContainers = {};\r\n    _initialize.call(this);\r\n}\r\n\r\nlet _createTilemap = Spriteset_Map.prototype.createTilemap;\r\nSpriteset_Map.prototype.createTilemap = function () {\r\n    if (!$gameMap.isTiledMap()) {\r\n        _createTilemap.call(this);\r\n        return;\r\n    }\r\n    this._tilemap = new TiledTilemap($gameMap.tiledData);\r\n    this._tilemap.horizontalWrap = $gameMap.isLoopHorizontal();\r\n    this._tilemap.verticalWrap = $gameMap.isLoopVertical();\r\n    this.loadTileset();\r\n    this._baseSprite.addChild(this._tilemap);\r\n};\r\n\r\nlet _loadTileset = Spriteset_Map.prototype.loadTileset;\r\nSpriteset_Map.prototype.loadTileset = function () {\r\n    if (!$gameMap.isTiledMap()) {\r\n        _loadTileset.call(this);\r\n        return;\r\n    }\r\n\r\n    let i = 0;\r\n    for (let tileset of $gameMap.tiledData.tilesets) {\r\n        if(tileset.properties && tileset.properties.ignoreLoading) {\r\n            continue;\r\n        }\r\n        this._tilemap.bitmaps[i] = ImageManager.loadParserTileset(tileset.image, 0);\r\n        i++;\r\n    }\r\n    this._tilemap.refreshTileset();\r\n    this._tileset = $gameMap.tiledData.tilesets;\r\n};\r\n\r\nlet _update = Spriteset_Map.prototype.update;\r\nSpriteset_Map.prototype.update = function () {\r\n    _update.call(this);\r\n    this._updateHideOnLevel();\r\n    this._updateHideOnSpecial();\r\n    this._tilemap.updateParallax();\r\n};\r\n\r\nSpriteset_Map.prototype.updateTileset = function () {\r\n    if (this._tileset !== $gameMap.tiledData.tilesets) {\r\n        this.loadTileset();\r\n    }\r\n};\r\n\r\nSpriteset_Map.prototype._updateHideOnLevel = function () {\r\n    this._tilemap.hideOnLevel($gameMap.currentMapLevel);\r\n};\r\n\r\nSpriteset_Map.prototype._updateHideOnSpecial = function () {\r\n    if($gamePlayer && $gameMap) {\r\n        this._tilemap.hideOnSpecial();\r\n    }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Spriteset_Map.js"],"sourceRoot":""}