{"version":3,"sources":["webpack:///webpack/bootstrap d87986cf25d7a5b93280","webpack:///./src/TiledTilemap.js","webpack:///./src/index.js","webpack:///./src/TilesetManager.js","webpack:///./src/DataManager.js","webpack:///./src/ImageManager.js","webpack:///./src/TiledManager.js","webpack:///./src/Game_Map.js","webpack:///./src/Game_CharacterBase.js","webpack:///./src/Game_Player.js","webpack:///./src/Spriteset_Map.js"],"names":["TiledTilemap","tiledData","_tiledData","_layers","_priorityTiles","_priorityTilesCount","setupTiled","_setupSize","_setupAnim","width","_width","height","_height","margin","_margin","tileCols","Math","ceil","_tileWidth","tileRows","_tileHeight","tilewidth","tileheight","_layerWidth","_layerHeight","_mapWidth","_mapHeight","_animFrame","_animDuration","id","_needsRepaint","parameters","PluginManager","useSquareShader","Number","hasOwnProperty","layers","layerData","zIndex","type","properties","parseInt","collision","toLevel","regionId","tileFlags","layer","PIXI","tilemap","CompositeRectTileLayer","layerId","spriteId","Sprite","_counter","push","addChild","_createPriorityTiles","pluginParams","size","Array","keys","x","sprite","Sprite_Base","z","hide","renderer","bitmaps","map","_baseTexture","Texture","setBitmaps","_updateAnim","needRefresh","key","refresh","startX","startY","ox","oy","roundPixels","floor","origin","y","offsetX","offsetx","offsetY","offsety","position","origX","origY","clear","_paintTiles","_paintObjectLayers","length","visible","_paintTilesLayer","objects","obj","gid","tileId","textureId","_getTextureId","dx","dy","_paintPriorityTile","_paintTile","mx","my","horizontalWrap","mod","verticalWrap","tilePosition","data","rectLayer","children","tileset","tilesets","w","h","columns","rId","_getAnimTileId","firstgid","ux","uy","_isPriorityTile","ooy","originOffsetY","tileproperties","addRect","anchor","bitmap","setFrame","priority","_getPriority","_getZIndex","origOffsetY","show","tilecount","tilesData","tiles","animation","frame","duration","tileid","playerZIndex","level","layerIds","hideOnLevel","removeChild","forEach","indexOf","hiddenData","TiledManager","checkLayerHidden","hasHideProperties","hideLayer","a","b","val","ShaderTilemap","addListener","Game_Player","options","d","$gameParty","members","actor","checkFloorEffect","moveStraight","addHideFunction","$gameMap","$gamePlayer","hideOnRegion","hideOnRegions","split","String","regionIds","regions","filter","region","$gameSwitches","value","hideOnSwitch","addFlag","TilesetManager","Error","window","_getFilename","path","paths","_getRealPath","getTileset","realPath","loadTileset","callback","xhr","XMLHttpRequest","open","overrideMimeType","onreadystatechange","readyState","status","responseText","JSON","parse","send","DataManager","_tempTiledData","_tiledLoaded","_loadMapData","loadMapData","mapId","call","loadTiledMapData","unloadTiledMapData","idx","tiledLoaded","tilesRequired","source","realTileset","Object","assign","returnTileset","_isMapLoaded","isMapLoaded","defaultLoaded","ImageManager","loadParserTileset","hue","loadEmptyBitmap","filename","loadNormalBitmap","loadParserParallax","_listeners","_hideFunctions","_hideIgnoreFunctions","collisions","levelChanges","_tileFlags","_tileFlagIndex","objectName","listener","recursive","name","triggerListener","object","constructor","top","proto","__proto__","ignore","flagIds","flagId","getFlag","getFlagNames","getFlagLocation","flag","bit","group","defineProperty","Game_Map","prototype","get","configurable","varID","_currentMapLevel","$gameVariables","set","setValue","_setup","setup","_collisionMap","_arrowCollisionMap","_regions","_mapLevelChange","_collisionMapLayers","_arrowCollisionMapLayers","_regionsLayers","_mapLevelChangeLayers","_tileFlagsLayers","currentMapLevel","isTiledMap","$dataMap","_setupTiled","_tiledInitialized","_refreshList","character","refreshBushDepth","isTiledInitialized","setRefreshDepth","_initializeMapLevel","_setupCollision","_setupRegion","_setupMapLevelChange","_setupTileFlags","_setupTiledEvents","_initializeMapLevelData","dataTypes","defaultData","dataType","defaultValue","typeData","_setupCollisionFull","_setupCollisionArrow","halfWidth","halfHeight","isHalfTile","realX","ids","_getTileset","tileData","collisionUpLeft","collisionUpRight","collisionDownLeft","collisionDownRight","arrowImpassable","arrowCollisionMap","realBit","arrowImpassableDown","arrowImpassableLeft","arrowImpassableRight","arrowImpassableUp","regionMap","regionOffset","levelChangeMap","tileFlagMap","_getTileFlags","_combineFlags","flags","flagNames","property","prop","slice","toUpperCase","i","target","eventId","event","_events","tileWidth","tileHeight","locate","_tiledProperties","toLowerCase","_regionId","allIds","index","regionLayer","regionValue","main","regionValues","hideData","_checkPassage","checkPassage","render","arrows","arrowLayer","arrowValue","renderPassage","getPassageLayers","_isPassable","isPassable","collisionMap","collisionLayer","collisionValue","renderIsPassable","getIsPassableLayers","checkMapLevelChanging","mapLevelChange","mapLevelChangeLayer","mapLevelChangeValue","getTileFlags","tileFlagsLayer","tileFlagsValue","renderTileFlags","checkHasTileFlag","renderHasTileFlag","_isBoatPassable","isBoatPassable","renderIsBoatPassable","_isShipPassable","isShipPassable","renderIsShipPassable","_isAirshipLandOk","isAirshipLandOk","renderIsAirshipLandOk","_isLadder","isLadder","isValid","renderIsLadder","_isBush","isBush","renderIsBush","_isCounter","isCounter","renderIsCounter","_isDamageFloor","isDamageFloor","renderIsDamageFloor","isSlipperyFloor","renderIsSlipperyFloor","getLayerProperties","ignoreHidden","layerProperties","getTileProperties","tileProperties","Game_CharacterBase","screenZ","_priorityType","_distancePerFrame","distancePerFrame","distance","min","_refreshBushDepth","_bushDepth","_updateMove","updateMove","hori","_realX","_x","vert","_realY","_y","isMoving","_checkEventTriggerHere","checkEventTriggerHere","triggers","_checkMapLevelChangingHere","_createTilemap","Spriteset_Map","createTilemap","_tilemap","isLoopHorizontal","isLoopVertical","_baseSprite","_loadTileset","image","refreshTileset","_tileset","_update","update","_updateHideOnLevel","_updateHideOnSpecial","updateTileset","hideOnSpecial"],"mappings":"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","file":"YED_Tiled.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d87986cf25d7a5b93280","export class TiledTilemap extends ShaderTilemap {\r\n    initialize(tiledData) {\r\n        this._tiledData = {};\r\n        this._layers = [];\r\n        this._priorityTiles = [];\r\n        this._priorityTilesCount = 0;\r\n        this.tiledData = tiledData;\r\n        super.initialize();\r\n        this.setupTiled();\r\n    }\r\n\r\n    get tiledData() {\r\n        return this._tiledData;\r\n    }\r\n\r\n    set tiledData(val) {\r\n        this._tiledData = val;\r\n        this.setupTiled();\r\n    }\r\n\r\n    setupTiled() {\r\n        this._setupSize();\r\n        this._setupAnim();\r\n    }\r\n\r\n    _setupSize() {\r\n        let width = this._width;\r\n        let height = this._height;\r\n        let margin = this._margin;\r\n        let tileCols = Math.ceil(width / this._tileWidth) + 1;\r\n        let tileRows = Math.ceil(height / this._tileHeight) + 1;\r\n        this._tileWidth = this.tiledData.tilewidth;\r\n        this._tileHeight = this.tiledData.tileheight;\r\n        this._layerWidth = tileCols * this._tileWidth;\r\n        this._layerHeight = tileRows * this._tileHeight;\r\n        this._mapWidth = this.tiledData.width;\r\n        this._mapHeight = this.tiledData.height;\r\n    }\r\n\r\n    _setupAnim() {\r\n        this._animFrame = {};\r\n        this._animDuration = {};\r\n    }\r\n\r\n    _createLayers() {\r\n        let id = 0;\r\n        this._needsRepaint = true;\r\n\r\n        let parameters = PluginManager.parameters('ShaderTilemap');\r\n        let useSquareShader = Number(parameters.hasOwnProperty('squareShader') ? parameters['squareShader'] : 1);\r\n\r\n        for (let layerData of this.tiledData.layers) {\r\n            let zIndex = 0;\r\n            if (layerData.type != \"tilelayer\") {\r\n                id++;\r\n                continue;\r\n            }\r\n\r\n            if (!!layerData.properties && !!layerData.properties.zIndex) {\r\n                zIndex = parseInt(layerData.properties.zIndex);\r\n            }\r\n\r\n            if (!!layerData.properties && !!layerData.properties.collision) {\r\n                id++;\r\n                continue;\r\n            }\r\n\r\n            if (!!layerData.properties && !!layerData.properties.toLevel) {\r\n                id++;\r\n                continue;\r\n            }\r\n\r\n            if (!!layerData.properties && !!layerData.properties.regionId) {\r\n                id++;\r\n                continue;\r\n            }\r\n\r\n            if (!!layerData.properties && layerData.properties.tileFlags === 'hide') {\r\n                id++;\r\n                continue;\r\n            }\r\n\r\n            let layer = new PIXI.tilemap.CompositeRectTileLayer(zIndex, [], useSquareShader);\r\n            layer.layerId = id; // @dryami: hack layer index\r\n            layer.spriteId = Sprite._counter++;\r\n            this._layers.push(layer);\r\n            this.addChild(layer);\r\n            id++;\r\n        }\r\n\r\n        this._createPriorityTiles();\r\n    }\r\n\r\n    _createPriorityTiles() {\r\n        let pluginParams = PluginManager.parameters(\"YED_Tiled\");\r\n        let size = parseInt(pluginParams[\"Priority Tiles Limit\"]);\r\n        let zIndex = parseInt(pluginParams[\"Z - Player\"]);\r\n        for (let x of Array(size).keys()) {\r\n            let sprite = new Sprite_Base();\r\n            sprite.z = sprite.zIndex = zIndex;\r\n            sprite.layerId = -1;\r\n            sprite.hide();\r\n            this.addChild(sprite);\r\n            this._priorityTiles.push(sprite);\r\n        }\r\n    }\r\n\r\n    _hackRenderer(renderer) {\r\n        return renderer;\r\n    }\r\n\r\n    refreshTileset() {\r\n        var bitmaps = this.bitmaps.map(function (x) { return x._baseTexture ? new PIXI.Texture(x._baseTexture) : x; });\r\n        for (let layer of this._layers) {\r\n            layer.setBitmaps(bitmaps);\r\n        }\r\n    }\r\n\r\n    update() {\r\n        super.update();\r\n        this._updateAnim();\r\n    }\r\n\r\n    _updateAnim() {\r\n        let needRefresh = false;\r\n        for (let key in this._animDuration) {\r\n            this._animDuration[key] -= 1;\r\n            if (this._animDuration[key] <= 0) {\r\n                this._animFrame[key] += 1;\r\n                needRefresh = true;\r\n            }\r\n        }\r\n\r\n        if (needRefresh) {\r\n            this.refresh();\r\n        }\r\n    }\r\n\r\n    _updateLayerPositions(startX, startY) {\r\n        let ox = 0;\r\n        let oy = 0;\r\n        if (this.roundPixels) {\r\n            ox = Math.floor(this.origin.x);\r\n            oy = Math.floor(this.origin.y);\r\n        } else {\r\n            ox = this.origin.x;\r\n            oy = this.origin.y;\r\n        }\r\n\r\n        for (let layer of this._layers) {\r\n            let layerData = this.tiledData.layers[layer.layerId];\r\n            let offsetX = layerData.offsetx || 0;\r\n            let offsetY = layerData.offsety || 0;\r\n            layer.position.x = startX * this._tileWidth - ox + offsetX;\r\n            layer.position.y = startY * this._tileHeight - oy + offsetY;\r\n        }\r\n\r\n        for (let sprite of this._priorityTiles) {\r\n            let layerData = this.tiledData.layers[sprite.layerId];\r\n            let offsetX = layerData ? layerData.offsetx || 0 : 0;\r\n            let offsetY = layerData ? layerData.offsety || 0 : 0;\r\n            sprite.x = sprite.origX + startX * this._tileWidth - ox + offsetX + sprite.width / 2;\r\n            sprite.y = sprite.origY + startY * this._tileHeight - oy + offsetY + sprite.height;\r\n        }\r\n    }\r\n\r\n    _paintAllTiles(startX, startY) {\r\n        this._priorityTilesCount = 0;\r\n        for (let layer of this._layers) {\r\n            layer.clear();\r\n            this._paintTiles(layer, startX, startY);\r\n        }\r\n        let id = 0;\r\n        for (let layerData of this.tiledData.layers) {\r\n            if (layerData.type != \"objectgroup\") {\r\n                id++;\r\n                continue;\r\n            }\r\n            this._paintObjectLayers(id, startX, startY);\r\n            id++;\r\n        }\r\n        while (this._priorityTilesCount < this._priorityTiles.length) {\r\n            let sprite = this._priorityTiles[this._priorityTilesCount];\r\n            sprite.hide();\r\n            sprite.layerId = -1;\r\n            this._priorityTilesCount++;\r\n        }\r\n    }\r\n\r\n    _paintTiles(layer, startX, startY) {\r\n        let layerData = this.tiledData.layers[layer.layerId];\r\n\r\n        if (!layerData.visible) {\r\n            return;\r\n        }\r\n\r\n        if (layerData.type == \"tilelayer\") {\r\n            this._paintTilesLayer(layer, startX, startY);\r\n        }\r\n    }\r\n\r\n    _paintObjectLayers(layerId, startX, startY) {\r\n        let layerData = this.tiledData.layers[layerId];\r\n        let objects = layerData.objects || [];\r\n\r\n        for (let obj of objects) {\r\n            if (!obj.gid) {\r\n                continue;\r\n            }\r\n            if (!obj.visible) {\r\n                continue;\r\n            }\r\n            let tileId = obj.gid;\r\n            let textureId = this._getTextureId(tileId);\r\n            let dx = obj.x - startX * this._tileWidth;\r\n            let dy = obj.y - startY * this._tileHeight - obj.height;\r\n            this._paintPriorityTile(layerId, textureId, tileId, startX, startY, dx, dy);\r\n        }\r\n    }\r\n\r\n    _paintTilesLayer(layer, startX, startY) {\r\n        let tileCols = Math.ceil(this._width / this._tileWidth) + 1;\r\n        let tileRows = Math.ceil(this._height / this._tileHeight) + 1;\r\n\r\n        for (let y of Array(tileRows).keys()) {\r\n            for (let x of Array(tileCols).keys()) {\r\n                this._paintTile(layer, startX, startY, x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    _paintTile(layer, startX, startY, x, y) {\r\n        let mx = x + startX;\r\n        let my = y + startY;\r\n        if (this.horizontalWrap) {\r\n            mx = mx.mod(this._mapWidth);\r\n        }\r\n        if (this.verticalWrap) {\r\n            my = my.mod(this._mapHeight);\r\n        }\r\n        let tilePosition = mx + my * this._mapWidth;\r\n        let tileId = this.tiledData.layers[layer.layerId].data[tilePosition];\r\n        let rectLayer = layer.children[0];\r\n        let textureId = 0;\r\n\r\n        if (!tileId) {\r\n            return;\r\n        }\r\n\r\n        // TODO: Problem with offsets\r\n        if (mx < 0 || mx >= this._mapWidth || my < 0 || my >= this._mapHeight) {\r\n            return;\r\n        }\r\n\r\n        textureId = this._getTextureId(tileId);\r\n\r\n        let tileset = this.tiledData.tilesets[textureId];\r\n        let dx = x * this._tileWidth;\r\n        let dy = y * this._tileHeight;\r\n        let w = tileset.tilewidth;\r\n        let h = tileset.tileheight;\r\n        let tileCols = tileset.columns;\r\n        let rId = this._getAnimTileId(textureId, tileId - tileset.firstgid);\r\n        let ux = (rId % tileCols) * w;\r\n        let uy = Math.floor(rId / tileCols) * h;\r\n\r\n        if (this._isPriorityTile(layer.layerId)) {\r\n            let ooy = 0;\r\n            if(this.tiledData.layers[layer.layerId].properties.originOffsetY) {\r\n                ooy = this.tiledData.layers[layer.layerId].properties.originOffsetY || 0\r\n            }\r\n            if(tileset.tileproperties &&\r\n                tileset.tileproperties[tileId - tileset.firstgid] &&\r\n                tileset.tileproperties[tileId - tileset.firstgid].originOffsetY) {\r\n                ooy = tileset.tileproperties[tileId - tileset.firstgid].originOffsetY || 0\r\n            }\r\n            this._paintPriorityTile(layer.layerId, textureId, tileId, startX, startY, dx, dy, ooy);\r\n            return;\r\n        }\r\n\r\n        rectLayer.addRect(textureId, ux, uy, dx, dy, w, h);\r\n    }\r\n\r\n    _paintPriorityTile(layerId, textureId, tileId, startX, startY, dx, dy, ooy = 0) {\r\n        let tileset = this.tiledData.tilesets[textureId];\r\n        let w = tileset.tilewidth;\r\n        let h = tileset.tileheight;\r\n        let tileCols = tileset.columns;\r\n        let rId = this._getAnimTileId(textureId, tileId - tileset.firstgid);\r\n        let ux = (rId % tileCols) * w;\r\n        let uy = Math.floor(rId / tileCols) * h;\r\n        let sprite = this._priorityTiles[this._priorityTilesCount];\r\n        let layerData = this.tiledData.layers[layerId];\r\n        let offsetX = layerData ? layerData.offsetx || 0 : 0;\r\n        let offsetY = layerData ? layerData.offsety || 0 : 0;\r\n        let ox = 0;\r\n        let oy = 0;\r\n        if (this.roundPixels) {\r\n            ox = Math.floor(this.origin.x);\r\n            oy = Math.floor(this.origin.y);\r\n        } else {\r\n            ox = this.origin.x;\r\n            oy = this.origin.y;\r\n        }\r\n\r\n        if (this._priorityTilesCount >= this._priorityTiles.length) {\r\n            return;\r\n        }\r\n\r\n        sprite.layerId = layerId;\r\n        sprite.anchor.x = 0.5;\r\n        sprite.anchor.y = 1.0;\r\n        sprite.origX = dx;\r\n        sprite.origY = dy;\r\n        sprite.x = sprite.origX + startX * this._tileWidth - ox + offsetX + w / 2;\r\n        sprite.y = sprite.origY + startY * this._tileHeight - oy + offsetY + h;\r\n        sprite.bitmap = this.bitmaps[textureId];\r\n        sprite.setFrame(ux, uy, w, h);\r\n        sprite.priority = this._getPriority(layerId);\r\n        sprite.z = sprite.zIndex = this._getZIndex(layerId);\r\n        sprite.origOffsetY = ooy;\r\n        sprite.show();\r\n\r\n        this._priorityTilesCount += 1;\r\n    }\r\n\r\n    _getTextureId(tileId) {\r\n        let textureId = 0;\r\n        for (let tileset of this.tiledData.tilesets) {\r\n            if (tileId < tileset.firstgid\r\n                || tileId >= tileset.firstgid + tileset.tilecount) {\r\n                textureId++;\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n        return textureId;\r\n    }\r\n\r\n    _getAnimTileId(textureId, tileId) {\r\n        let tilesData = this.tiledData.tilesets[textureId].tiles;\r\n        if (!tilesData) {\r\n            return tileId;\r\n        }\r\n        if (!tilesData[tileId]) {\r\n            return tileId;\r\n        }\r\n        if (!tilesData[tileId].animation) {\r\n            return tileId;\r\n        }\r\n        let animation = tilesData[tileId].animation;\r\n        this._animFrame[tileId] = this._animFrame[tileId] || 0;\r\n        let frame = this._animFrame[tileId];\r\n        this._animFrame[tileId] = !!animation[frame] ? frame : 0;\r\n        frame = this._animFrame[tileId];\r\n        let duration = animation[frame].duration / 1000 * 60;\r\n        this._animDuration[tileId] = this._animDuration[tileId] || duration;\r\n        if (this._animDuration[tileId] <= 0) {\r\n            this._animDuration[tileId] = duration;\r\n        }\r\n        return animation[frame].tileid;\r\n    }\r\n\r\n    _getPriority(layerId) {\r\n        let layerData = this.tiledData.layers[layerId];\r\n        if (!layerData.properties) {\r\n            return 0;\r\n        }\r\n        if (!layerData.properties.priority) {\r\n            return 0;\r\n        }\r\n        return parseInt(layerData.properties.priority)\r\n    }\r\n\r\n    _isPriorityTile(layerId) {\r\n        let pluginParams = PluginManager.parameters(\"YED_Tiled\");\r\n        let playerZIndex = parseInt(pluginParams[\"Z - Player\"]);\r\n        let zIndex = this._getZIndex(layerId);\r\n        return this._getPriority(layerId) > 0\r\n            && zIndex === playerZIndex;\r\n    }\r\n\r\n    _getZIndex(layerId) {\r\n        let layerData = this.tiledData.layers[layerId];\r\n        if (!layerData) {\r\n            return 0;\r\n        }\r\n        if (!layerData.properties || !layerData.properties.zIndex) {\r\n            return 0;\r\n        }\r\n        return parseInt(layerData.properties.zIndex);\r\n    }\r\n\r\n    hideOnLevel(level) {\r\n        let layerIds = [];\r\n        for (let layer of this._layers) {\r\n            let layerData = this.tiledData.layers[layer.layerId];\r\n            if (layerData.properties && layerData.properties.hasOwnProperty(\"hideOnLevel\")) {\r\n                if (parseInt(layerData.properties.hideOnLevel) !== level) {\r\n                    this.addChild(layer);\r\n                    continue;\r\n                }\r\n                layerIds.push(layer.layerId);\r\n                this.removeChild(layer);\r\n            }\r\n        }\r\n        this._priorityTiles.forEach(sprite => {\r\n            if(layerIds.indexOf(sprite.layerId) > -1) {\r\n                sprite.visible = true;\r\n            }\r\n        })\r\n    }\r\n    \r\n    hideOnSpecial() {\r\n        let layerIds = [];\r\n        for(let layer of this._layers) {\r\n            let layerData = this.tiledData.layers[layer.layerId];\r\n\t\t\tif(layerData.properties) {\r\n                let hiddenData = TiledManager.checkLayerHidden(layerData);\r\n\t\t\t\tlet hasHideProperties = hiddenData[0];\r\n                let hideLayer = hiddenData[1];\r\n                \r\n\t\t\t\t/* If the layer has a hide property, run this code.\r\n\t\t\t\t * You don't need to run it for layers that don't have any properties that would\r\n\t\t\t\t   hide this layer. */\r\n\t\t\t\tif (hasHideProperties) {\r\n\t\t\t\t\t/* If the layer isn't supposed to be hidden, add the layer to the container */\r\n\t\t\t\t\tif (!hideLayer) {\r\n\t\t\t\t\t\tthis.addChild(layer);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t/* Otherwise remove the layer and hide it */\r\n\t\t\t\t\tlayerIds.push(layer.layerId);\r\n\t\t\t\t\tthis.removeChild(layer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n        }\r\n\t\t/* Hide priority tiles that are supposed to be hidden */\r\n        this._priorityTiles.forEach(sprite => {\r\n            if(layerIds.indexOf(sprite.layerId) > -1) {\r\n                sprite.visible = false;\r\n            }\r\n        })\r\n    }\r\n\t\r\n    _compareChildOrder(a, b) {\r\n        if ((a.z || 0) !== (b.z || 0)) {\r\n            return (a.z || 0) - (b.z || 0);\r\n        } else if (((a.y || 0) + (a.origOffsetY || 0)) !== ((b.y || 0) + (b.origOffsetY || 0))) {\r\n            return ((a.y || 0) + (a.origOffsetY || 0)) - ((b.y || 0) + (b.origOffsetY || 0));\r\n        } else if ((a.priority || 0) !== (b.priority || 0)) {\r\n            return (a.priority || 0) - (b.priority || 0);\r\n        } else {\r\n            return a.spriteId - b.spriteId;\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/TiledTilemap.js","import \"./TilesetManager\";\r\nimport \"./DataManager\";\r\nimport \"./ImageManager\";\r\nimport \"./TiledManager\";\r\nimport { TiledTilemap } from \"./TiledTilemap\";\r\nimport \"./Game_Map\";\r\nimport \"./Game_CharacterBase\";\r\nimport \"./Game_Player\";\r\nimport \"./Spriteset_Map\";\r\n\r\n/* INITIALIZES LISTENERS */\r\n\r\n// Add floor damage while on a slippery floor\r\nTiledManager.addListener(Game_Player, 'slipperyfloor', function(options) {\r\n    const {d} = options\r\n    $gameParty.members().forEach(actor => {\r\n        actor.checkFloorEffect();\r\n    })\r\n    this.moveStraight(d);\r\n})\r\n\r\n/* INITIALIZES HIDE FUNCTIONS */\r\n\r\nTiledManager.addHideFunction('hideOnRegion', function(layerData) {\r\n    /* Hide if player is on certain region */\r\n    let regionId = $gameMap.regionId($gamePlayer.x, $gamePlayer.y);\r\n    let hideLayer = false;\r\n    if(parseInt(layerData.properties.hideOnRegion) === regionId) {\r\n        hideLayer = true;\r\n    }\r\n    return hideLayer;\r\n}, ['regions'])\r\n\r\nTiledManager.addHideFunction('hideOnRegions', function(layerData) {\r\n    /* Hide if player is on certain region */\r\n    let regionId = $gameMap.regionId($gamePlayer.x, $gamePlayer.y);\r\n    let hideLayer = false;\r\n    if(layerData.properties.hideOnRegions.split(',').indexOf(String(regionId)) !== -1) {\r\n        hideLayer = true;\r\n    }\r\n    return hideLayer;\r\n}, ['regions'])\r\n\r\nTiledManager.addHideFunction('hideOnAnyRegions', function(layerData) {\r\n    /* Hide if player is on certain region */\r\n    let regionIds = $gameMap.regionIds($gamePlayer.x, $gamePlayer.y);\r\n    let hideLayer = false;\r\n    let regions = layerData.properties.hideOnRegions.split(',');\r\n    if(regions.filter(region => regionIds.indexOf(region) > -1).length > 0) {\r\n        hideLayer = true;\r\n    }\r\n    return hideLayer;\r\n}, ['regions'])\r\n\r\nTiledManager.addHideFunction('hideOnSwitch', function(layerData) {\r\n    /* Hide if switch is on */\r\n    let hideLayer = false;\r\n    if($gameSwitches.value(layerData.properties.hideOnSwitch)) {\r\n        hideLayer = true;\r\n    }\r\n    return hideLayer;\r\n})\r\n\r\nTiledManager.addHideFunction('showOnSwitch', function(layerData) {\r\n    /* Show if switch is on */\r\n    let hideLayer = false;\r\n    if(!$gameSwitches.value(layerData.properties.hideOnSwitch)) {\r\n        hideLayer = true;\r\n    }\r\n    return hideLayer;\r\n})\r\n\r\n/* INITIALIZES FLAGS */\r\n\r\nTiledManager.addFlag('boat', 'ship', 'airship')\r\nTiledManager.addFlag('ladder', 'bush', 'counter', 'damage')\r\nTiledManager.addFlag('ice', 'autoDown', 'autoLeft', 'autoRight', 'autoUp')\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","//-----------------------------------------------------------------------------\r\n// TilesetManager\r\n//\r\n// The static class that manages the TileD tilesets.\r\n\r\nfunction TilesetManager() {\r\n    throw new Error('This is a static class');\r\n}\r\n\r\nwindow.TilesetManager = TilesetManager;\r\nTilesetManager.tilesets = {};\r\n\r\nlet _getFilename = function(path) {\r\n    let paths = path.split(\"/\");\r\n    return paths[paths.length - 1];\r\n};\r\n\r\nlet _getRealPath = function(path) {\r\n    let pluginParams = PluginManager.parameters(\"YED_Tiled\");\r\n    return pluginParams[\"Tilesets Location\"] + _getFilename(path);\r\n};\r\n\r\nTilesetManager.getTileset = function(path) {\r\n    let realPath = _getRealPath(path);\r\n    return TilesetManager.tilesets[_getFilename(path)];\r\n};\r\n\r\nTilesetManager.loadTileset = function(path, callback = false) {\r\n    let realPath = _getRealPath(path);\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open('GET', './' + realPath);\r\n    xhr.overrideMimeType('application/json');\r\n\r\n    // on success callback\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState === 4) {\r\n            let tileset = false;\r\n            if (xhr.status === 200 || xhr.responseText !== \"\") {\r\n                tileset = JSON.parse(xhr.responseText);\r\n                TilesetManager.tilesets[_getFilename(path)] = tileset;\r\n            }\r\n            if(callback) {\r\n                callback(tileset);\r\n            }\r\n        }\r\n    };\r\n\r\n    // send request\r\n    xhr.send();\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/TilesetManager.js","DataManager._tempTiledData = null;\r\nDataManager._tiledLoaded = false;\r\n\r\nlet _loadMapData = DataManager.loadMapData;\r\nDataManager.loadMapData = function (mapId) {\r\n    _loadMapData.call(this, mapId);\r\n    if (mapId > 0) {\r\n        this.loadTiledMapData(mapId);\r\n    } else {\r\n        this.unloadTiledMapData();\r\n    }\r\n};\r\n\r\nDataManager.loadTiledMapData = function (mapId) {\r\n    var xhr = new XMLHttpRequest();\r\n    let pluginParams = PluginManager.parameters(\"YED_Tiled\");\r\n    xhr.open('GET', \"./\" + pluginParams[\"Maps Location\"] + \"Map\" + mapId + \".json\");\r\n    xhr.overrideMimeType('application/json');\r\n\r\n    // on success callback\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState === 4) {\r\n            if (xhr.status === 200 || xhr.responseText !== \"\") {\r\n                DataManager._tempTiledData = JSON.parse(xhr.responseText);\r\n            }\r\n            let tiledLoaded = true;\r\n            let tilesRequired = 0;\r\n            if(DataManager._tempTiledData && DataManager._tempTiledData.tilesets && DataManager._tempTiledData.tilesets.length > 0) {\r\n                for(var idx = 0; idx < DataManager._tempTiledData.tilesets.length; idx++) {\r\n                    let tileset = DataManager._tempTiledData.tilesets[idx];\r\n                    if(tileset.source) {\r\n                        let realTileset = TilesetManager.getTileset(tileset.source);\r\n                        if(realTileset) {\r\n                            DataManager._tempTiledData.tilesets[idx] = Object.assign({}, realTileset, {firstgid: DataManager._tempTiledData.tilesets[idx].firstgid});\r\n                        } else {\r\n                            tiledLoaded = false;\r\n                            tilesRequired++;\r\n                            +function(idx) {\r\n                                TilesetManager.loadTileset(tileset.source, function(returnTileset) {\r\n                                    DataManager._tempTiledData.tilesets[idx] = Object.assign({}, returnTileset, {firstgid: DataManager._tempTiledData.tilesets[idx].firstgid});\r\n                                    tilesRequired--;\r\n                                    if(tilesRequired === 0) {\r\n                                        DataManager._tiledLoaded = true;\r\n                                    }\r\n                                });\r\n                            }(idx);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            DataManager._tiledLoaded = tiledLoaded;\r\n        }\r\n    };\r\n\r\n    // set data to null and send request\r\n    this.unloadTiledMapData();\r\n    xhr.send();\r\n};\r\n\r\nDataManager.unloadTiledMapData = function () {\r\n    DataManager._tempTiledData = null;\r\n    DataManager._tiledLoaded = false;\r\n};\r\n\r\nlet _isMapLoaded = DataManager.isMapLoaded;\r\nDataManager.isMapLoaded = function() {\r\n    let defaultLoaded = _isMapLoaded.call(this);\r\n    let tiledLoaded = DataManager._tiledLoaded;\r\n\r\n    return defaultLoaded && tiledLoaded;\r\n};\n\n\n// WEBPACK FOOTER //\n// ./src/DataManager.js","ImageManager.loadParserTileset = function (path, hue) {\r\n    if (!path) {\r\n        return this.loadEmptyBitmap();\r\n    }\r\n    let paths = path.split(\"/\");\r\n    let filename = paths[paths.length - 1];\r\n    let realPath = \"img/tilesets/\" + filename;\r\n\r\n    return this.loadNormalBitmap(realPath, hue);\r\n};\r\n\r\nImageManager.loadParserParallax = function (path, hue) {\r\n    if (!path) {\r\n        return this.loadEmptyBitmap();\r\n    }\r\n    let paths = path.split(\"/\");\r\n    let filename = paths[paths.length - 1];\r\n    let realPath = \"img/parallaxes/\" + filename;\r\n\r\n    return this.loadNormalBitmap(realPath, hue);\r\n};\n\n\n// WEBPACK FOOTER //\n// ./src/ImageManager.js","//-----------------------------------------------------------------------------\r\n// TiledManager\r\n//\r\n// The static class that manages TileD data, including extensions.\r\n\r\nfunction TiledManager() {\r\n    throw new Error('This is a static class');\r\n}\r\n\r\nwindow.TiledManager = TiledManager;\r\n\r\nlet _listeners = {}\r\nlet _hideFunctions = {}\r\nlet _hideIgnoreFunctions = {\r\n    regions: [],\r\n    collisions: [],\r\n    levelChanges: [],\r\n    tileFlags: []\r\n}\r\nlet _tileFlags = {}\r\nlet _tileFlagIndex = 1;\r\n\r\nTiledManager.addListener = function(objectName, listener, callback, recursive = true) {\r\n    if(typeof objectName === 'function') {\r\n        objectName = objectName.name\r\n    }\r\n    if(!_listeners[objectName]) {\r\n        _listeners[objectName] = {}\r\n    }\r\n    if(!_listeners[objectName][listener]) {\r\n        _listeners[objectName][listener] = []\r\n    }\r\n    callback.recursive = !!recursive\r\n    _listeners[objectName][listener].push(callback)\r\n}\r\n\r\nTiledManager.triggerListener = function(object, listener, options = {}) {\r\n    let objectName = object.constructor.name\r\n    if(!_listeners[objectName] || !_listeners[objectName][listener]) {\r\n        return false\r\n    }\r\n    let top = true\r\n    let proto = object.__proto__\r\n    while(proto) {\r\n        objectName = proto.constructor.name\r\n        if(_listeners[objectName] && _listeners[objectName][listener]) {\r\n            _listeners[objectName][listener].forEach(callback => {\r\n                if(top || callback.recursive) {\r\n                    callback.call(object, options)\r\n                }\r\n            })\r\n        }\r\n        top = false\r\n        proto = proto.__proto__\r\n    }\r\n}\r\n\r\nTiledManager.addHideFunction = function(id, callback, ignore = []) {\r\n    _hideFunctions[id] = callback\r\n\r\n    ignore.forEach((type) => {\r\n        _hideIgnoreFunctions[type].push(id)\r\n    })\r\n}\r\n\r\nTiledManager.checkLayerHidden = function(layerData, ignore = []) {\r\n    if(typeof ignore === 'string') {\r\n        ignore = _hideIgnoreFunctions[ignore] || []\r\n    }\r\n    let keys = Object.keys(_hideFunctions);\r\n    let data = [false, false];\r\n    for(let idx = 0; idx < keys.length; idx++) {\r\n        if(ignore.indexOf(keys) !== -1) {\r\n            continue;\r\n        }\r\n        if(layerData.properties && layerData.properties.hasOwnProperty(keys[idx])) {\r\n            data[0] = true;\r\n            data[1] = data[1] || _hideFunctions[keys[idx]](layerData);\r\n        }\r\n        if(data[1]) {\r\n            return data;\r\n        }\r\n    }\r\n    return data;\r\n}\r\n\r\nTiledManager.addFlag = function(...flagIds) {\r\n    flagIds.forEach(flagId => {\r\n        _tileFlags[flagId] = _tileFlagIndex++;\r\n    })\r\n}\r\n\r\nTiledManager.getFlag = function(flagId) {\r\n    return _tileFlags[flagId];\r\n}\r\n\r\nTiledManager.getFlagNames = function() {\r\n    return Object.keys(_tileFlags);\r\n}\r\n\r\nTiledManager.getFlagLocation = function(flagId) {\r\n    let flag = _tileFlags[flagId]\r\n    let bit = (1 << (flag % 16)) & 0xffff;\r\n    let group = Math.floor(flag / 16);\r\n    return [group, bit];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/TiledManager.js","// Constants\r\n\r\nObject.defineProperty(Game_Map.prototype, 'tiledData', {\r\n    get: function () {\r\n        return DataManager._tempTiledData;\r\n    },\r\n    configurable: true\r\n});\r\n\r\nObject.defineProperty(Game_Map.prototype, 'currentMapLevel', {\r\n    get: function () {\r\n        let pluginParams = PluginManager.parameters(\"YED_Tiled\");\r\n        let varID = parseInt(pluginParams[\"Map Level Variable\"]);\r\n        if (!varID) {\r\n            return this._currentMapLevel;\r\n        } else {\r\n            return $gameVariables.value(varID);\r\n        }\r\n    },\r\n    set: function (value) {\r\n        let pluginParams = PluginManager.parameters(\"YED_Tiled\");\r\n        let varID = parseInt(pluginParams[\"Map Level Variable\"]);\r\n        if (!varID) {\r\n            this._currentMapLevel = value;\r\n        } else {\r\n            $gameVariables.setValue(varID, value);\r\n        }\r\n    },\r\n    configurable: true\r\n});\r\n\r\nlet _setup = Game_Map.prototype.setup;\r\nGame_Map.prototype.setup = function (mapId) {\r\n    _setup.call(this, mapId);\r\n    this._collisionMap = {};\r\n    this._arrowCollisionMap = {};\r\n    this._regions = {};\r\n    this._mapLevelChange = {};\r\n    this._tileFlags = {};\r\n    this._collisionMapLayers = [];\r\n    this._arrowCollisionMapLayers = [];\r\n    this._regionsLayers = [];\r\n    this._mapLevelChangeLayers = [];\r\n    this._tileFlagsLayers = [];\r\n    this._currentMapLevel = 0;\r\n    this.currentMapLevel = 0;\r\n    if (this.isTiledMap()) {\r\n        $dataMap.width = this.tiledData.width;\r\n        $dataMap.height = this.tiledData.height;\r\n        this._setupTiled();\r\n        this._tiledInitialized = true;\r\n        if(this._refreshList) {\r\n            this._refreshList.forEach(character => {\r\n                character.refreshBushDepth();\r\n            })\r\n        }\r\n    }\r\n};\r\n\r\nGame_Map.prototype.isTiledInitialized = function() {\r\n    return !!this._tiledInitialized;\r\n}\r\n\r\nGame_Map.prototype.setRefreshDepth = function(character) {\r\n    if(!this._refreshList) {\r\n        this._refreshList = [];\r\n    }\r\n    this._refreshList.push(character);\r\n}\r\n\r\nGame_Map.prototype.isTiledMap = function () {\r\n    return !!this.tiledData;\r\n};\r\n\r\nGame_Map.prototype.hasHideProperties = function(layerData) {\r\n    return (layerData.properties && (\r\n        layerData.properties.hideOnRegion ||\r\n        layerData.properties.hideOnRegions ||\r\n        layerData.properties.hideOnSwitch)\r\n    );\r\n}\r\n\r\nGame_Map.prototype._setupTiled = function () {\r\n    this._initializeMapLevel(0);\r\n\r\n    this._setupCollision();\r\n    this._setupRegion();\r\n    this._setupMapLevelChange();\r\n    this._setupTileFlags();\r\n    this._setupTiledEvents();\r\n};\r\n\r\nGame_Map.prototype._initializeMapLevel = function (id) {\r\n    if (!!this._collisionMap[id]) {\r\n        return;\r\n    }\r\n\r\n    this._collisionMap[id] = {};\r\n    this._arrowCollisionMap[id] = {};\r\n    this._regions[id] = {};\r\n    this._mapLevelChange[id] = {};\r\n    this._tileFlags[id] = {};\r\n    this._collisionMapLayers[id] = [];\r\n    this._arrowCollisionMapLayers[id] = [];\r\n    this._regionsLayers[id] = [];\r\n    this._mapLevelChangeLayers[id] = [];\r\n    this._tileFlagsLayers[id] = [];\r\n    this._initializeMapLevelData(id);\r\n};\r\n\r\nGame_Map.prototype._initializeMapLevelData = function(id = 0, layerId = 'main', dataTypes = false) {\r\n    let width = this.width();\r\n    let height = this.height();\r\n    let size = width * height;\r\n    \r\n    const defaultData = {\r\n        'collisionMap': 0,\r\n        'arrowCollisionMap': 1 | 2 | 4 | 8,\r\n        'regions': 0,\r\n        'mapLevelChange': -1,\r\n        'tileFlags': 0\r\n    }\r\n\r\n    if(!dataTypes) {\r\n        dataTypes = Object.keys(defaultData);\r\n    }\r\n\r\n    for(let idx = 0; idx < dataTypes.length; idx++) {\r\n        let dataType = dataTypes[idx];\r\n        let defaultValue = defaultData[dataType];\r\n        if(!!this['_' + dataType][id][layerId]) {\r\n            continue;\r\n        }\r\n        this['_' + dataType][id][layerId] = []\r\n        let typeData = this['_' + dataType][id][layerId]\r\n        for (let x of Array(size).keys()) {\r\n            typeData.push(defaultValue);\r\n        }\r\n    }\r\n}\r\n\r\nGame_Map.prototype._setupCollision = function () {\r\n    this._setupCollisionFull();\r\n    this._setupCollisionArrow();\r\n};\r\n\r\nGame_Map.prototype._setupCollisionFull = function () {\r\n    let width = this.width();\r\n    let height = this.height();\r\n    let size = width * height;\r\n    let halfWidth = width / 2;\r\n    let halfHeight = height / 2;\r\n\r\n    if (this.isHalfTile()) {\r\n        size /= 4;\r\n    }\r\n\r\n    for (let idx = 0; idx < this.tiledData.layers.length; idx++) {\r\n        let layerData = this.tiledData.layers[idx]\r\n        if (!layerData.properties || !layerData.properties.collision) {\r\n            continue;\r\n        }\r\n\r\n        if (layerData.properties.collision !== \"full\"\r\n            && layerData.properties.collision !== \"up-left\"\r\n            && layerData.properties.collision !== \"up-right\"\r\n            && layerData.properties.collision !== \"down-left\"\r\n            && layerData.properties.collision !== \"down-right\"\r\n            && layerData.properties.collision !== \"tiles\") {\r\n            continue;\r\n        }\r\n\r\n        let level = parseInt(layerData.properties.level) || 0;\r\n        this._initializeMapLevel(level);\r\n        \r\n        let layerId = 'main';\r\n\r\n        if(this.hasHideProperties(layerData)) {\r\n            layerId = idx;\r\n            this._collisionMapLayers[level].push(idx);\r\n            this._initializeMapLevelData(level, layerId, ['collisionMap']);\r\n        }\r\n        \r\n        for (let x of Array(size).keys()) {\r\n            let realX = x;\r\n            let ids = [];\r\n            if (this.isHalfTile()) {\r\n                realX = Math.floor(x / halfWidth) * width * 2 + (x % halfWidth) * 2;\r\n            }\r\n            if (!!layerData.data[x]) {\r\n                switch(layerData.properties.collision) {\r\n                    case \"full\":\r\n                        ids.push(realX);\r\n                        if (this.isHalfTile()) {\r\n                            ids.push(realX + 1, realX + width, realX + width + 1);\r\n                        }\r\n                        break;\r\n                    case \"up-left\":\r\n                        ids.push(realX);\r\n                        break;\r\n                    case \"up-right\":\r\n                        ids.push(realX + 1);\r\n                        break;\r\n                    case \"down-left\":\r\n                        ids.push(realX + width);\r\n                        break;\r\n                    case \"down-right\":\r\n                        ids.push(realX + width + 1);\r\n                        break;\r\n                    case \"tiles\":\r\n                        let tileId = layerData.data[x];\r\n                        let tileset = this._getTileset(tileId);\r\n                        if(tileset && tileset.tileproperties) {\r\n                            let tileData = tileset.tileproperties[tileId - tileset.firstgid];\r\n                            if(tileData) {\r\n                                if(tileData.collision) {\r\n                                    ids.push(realX);\r\n                                    if (this.isHalfTile()) {\r\n                                        ids.push(realX + 1, realX + width, realX + width + 1);\r\n                                    }\r\n                                }\r\n                                if(tileData.collisionUpLeft) {\r\n                                    ids.push(realX);\r\n                                }\r\n                                if(tileData.collisionUpRight) {\r\n                                    ids.push(realX + 1);\r\n                                }\r\n                                if(tileData.collisionDownLeft) {\r\n                                    ids.push(realX + width);\r\n                                }\r\n                                if(tileData.collisionDownRight) {\r\n                                    ids.push(realX + width + 1);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n                for (let id of ids) {\r\n                    this._collisionMap[level][layerId][id] = 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nGame_Map.prototype._setupCollisionArrow = function () {\r\n    let width = this.width();\r\n    let height = this.height();\r\n    let size = width * height;\r\n    let bit = 0;\r\n    let halfWidth = width / 2;\r\n    let halfHeight = height / 2;\r\n\r\n    if (this.isHalfTile()) {\r\n        size /= 4;\r\n    }\r\n\r\n    for (let idx = 0; idx < this.tiledData.layers.length; idx++) {\r\n        let layerData = this.tiledData.layers[idx]\r\n        if (!layerData.properties || !layerData.properties.collision) {\r\n            continue;\r\n        }\r\n\r\n        if (layerData.properties.collision !== \"arrow\" && layerData.properties.collision !== \"tiles\") {\r\n            continue;\r\n        }\r\n\r\n        if (!layerData.properties.arrowImpassable && layerData.properties.collision !== \"tiles\") {\r\n            continue;\r\n        }\r\n        \r\n        if(layerData.properties.arrowImpassable) {\r\n\r\n            if (layerData.properties.arrowImpassable === \"down\") {\r\n                bit = 1;\r\n            }\r\n\r\n            if (layerData.properties.arrowImpassable === \"left\") {\r\n                bit = 2;\r\n            }\r\n\r\n            if (layerData.properties.arrowImpassable === \"right\") {\r\n                bit = 4;\r\n            }\r\n\r\n            if (layerData.properties.arrowImpassable === \"up\") {\r\n                bit = 8;\r\n            }\r\n\r\n\r\n        }\r\n\r\n        let level = parseInt(layerData.properties.level) || 0;\r\n        this._initializeMapLevel(level);\r\n        \r\n        let layerId = 'main';\r\n\r\n        if(this.hasHideProperties(layerData)) {\r\n            layerId = idx;\r\n            this._arrowCollisionMapLayers[level].push(idx);\r\n            this._initializeMapLevelData(level, layerId, ['arrowCollisionMap']);\r\n        }\r\n        \r\n        let arrowCollisionMap = this._arrowCollisionMap[level][layerId];\r\n        for (let x of Array(size).keys()) {\r\n            let realX = x;\r\n            if (this.isHalfTile()) {\r\n                realX = Math.floor(x / halfWidth) * width * 2 + (x % halfWidth) * 2;\r\n            }\r\n\r\n            if (!!layerData.data[x]) {\r\n                let realBit = bit;\r\n                if(layerData.properties.collision === \"tiles\") {\r\n                    realBit = 0;\r\n                    let tileId = layerData.data[x];\r\n                    let tileset = this._getTileset(tileId);\r\n                    if(tileset && tileset.tileproperties) {\r\n                        let tileData = tileset.tileproperties[tileId - tileset.firstgid];\r\n                        if(tileData) {\r\n                            if(tileData.arrowImpassableDown) {\r\n                                realBit+= 1;\r\n                            }\r\n                            if(tileData.arrowImpassableLeft) {\r\n                                realBit+= 2;\r\n                            }\r\n                            if(tileData.arrowImpassableRight) {\r\n                                realBit+= 4;\r\n                            }\r\n                            if(tileData.arrowImpassableUp) {\r\n                                realBit+= 8;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                arrowCollisionMap[realX] = arrowCollisionMap[realX] ^ realBit;\r\n                if (this.isHalfTile()) {\r\n                    arrowCollisionMap[realX + 1]\r\n                        = arrowCollisionMap[realX + 1] ^ realBit;\r\n                    arrowCollisionMap[realX + width]\r\n                        = arrowCollisionMap[realX + width] ^ realBit;\r\n                    arrowCollisionMap[realX + width + 1]\r\n                        = arrowCollisionMap[realX + width + 1] ^ realBit;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nGame_Map.prototype._setupRegion = function () {\r\n    let width = this.width();\r\n    let height = this.height();\r\n    let size = width * height;\r\n    let halfWidth = width / 2;\r\n    let halfHeight = height / 2;\r\n\r\n    if (this.isHalfTile()) {\r\n        size /= 4;\r\n    }\r\n\r\n    for (let idx = 0; idx < this.tiledData.layers.length; idx++) {\r\n        let layerData = this.tiledData.layers[idx]\r\n        if (!layerData.properties || !layerData.properties.regionId) {\r\n            continue;\r\n        }\r\n\r\n        let level = parseInt(layerData.properties.level) || 0;\r\n        this._initializeMapLevel(level);\r\n        \r\n        let layerId = 'main';\r\n\r\n        if(this.hasHideProperties(layerData)) {\r\n            layerId = idx;\r\n            this._regionsLayers[level].push(idx);\r\n            this._initializeMapLevelData(level, layerId, ['regions']);\r\n        }\r\n        \r\n        let regionMap = this._regions[level][layerId];\r\n\r\n        for (let x of Array(size).keys()) {\r\n            let realX = x;\r\n            if (this.isHalfTile()) {\r\n                realX = Math.floor(x / halfWidth) * width * 2 + (x % halfWidth) * 2;\r\n            }\r\n\r\n            if (!!layerData.data[x]) {\r\n                let regionId = 0;\r\n                if(layerData.properties.regionId > -1) {\r\n                    regionId = parseInt(layerData.properties.regionId);\r\n                } else {\r\n                    let tileId = layerData.data[x];\r\n                    let tileset = this._getTileset(tileId);\r\n                    if(tileset && tileset.tileproperties) {\r\n                        let tileData = tileset.tileproperties[tileId - tileset.firstgid];\r\n                        if(tileData && tileData.regionId) {\r\n                            regionId = parseInt(tileData.regionId);\r\n                        }\r\n                    }\r\n                    if(layerData.properties.regionOffset) {\r\n                        regionId+= layerData.properties.regionOffset;\r\n                    }\r\n                }\r\n                regionMap[realX] = regionId;\r\n                if (this.isHalfTile()) {\r\n                    regionMap[realX + 1] = regionId;\r\n                    regionMap[realX + width] = regionId;\r\n                    regionMap[realX + width + 1] = regionId;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nGame_Map.prototype._setupMapLevelChange = function () {\r\n    let width = this.width();\r\n    let height = this.height();\r\n    let size = width * height;\r\n    let halfWidth = width / 2;\r\n    let halfHeight = height / 2;\r\n\r\n    if (this.isHalfTile()) {\r\n        size /= 4;\r\n    }\r\n\r\n    for (let idx = 0; idx < this.tiledData.layers.length; idx++) {\r\n        let layerData = this.tiledData.layers[idx]\r\n        if (!layerData.properties || !layerData.properties.toLevel) {\r\n            continue;\r\n        }\r\n\r\n        let level = parseInt(layerData.properties.level) || 0;\r\n        this._initializeMapLevel(level);\r\n        let layerId = 'main';\r\n\r\n        if(this.hasHideProperties(layerData)) {\r\n            layerId = idx;\r\n            this._mapLevelChangeLayers[level].push(idx);\r\n            this._initializeMapLevelData(level, layerId, ['mapLevelChange']);\r\n        }\r\n        \r\n        let levelChangeMap = this._mapLevelChange[level][layerId];\r\n\r\n        for (let x of Array(size).keys()) {\r\n            let realX = x;\r\n            let toLevel = parseInt(layerData.properties.toLevel);\r\n            if (this.isHalfTile()) {\r\n                realX = Math.floor(x / halfWidth) * width * 2 + (x % halfWidth) * 2;\r\n            }\r\n\r\n            if (!!layerData.data[x]) {\r\n                levelChangeMap[realX] = toLevel;\r\n                if (this.isHalfTile()) {\r\n                    levelChangeMap[realX + 1] = toLevel;\r\n                    levelChangeMap[realX + width] = toLevel;\r\n                    levelChangeMap[realX + width + 1] = toLevel;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nGame_Map.prototype._setupTileFlags = function() {\r\n    let width = this.width();\r\n    let height = this.height();\r\n    let size = width * height;\r\n    let halfWidth = width / 2;\r\n    let halfHeight = height / 2;\r\n\r\n    if (this.isHalfTile()) {\r\n        size /= 4;\r\n    }\r\n    \r\n    for (let idx = 0; idx < this.tiledData.layers.length; idx++) {\r\n        let layerData = this.tiledData.layers[idx]\r\n        if (!layerData.properties || !layerData.properties.tileFlags) {\r\n            continue;\r\n        }\r\n\r\n        let level = parseInt(layerData.properties.level) || 0;\r\n        this._initializeMapLevel(level);\r\n        \r\n        let layerId = 'main';\r\n\r\n        if(this.hasHideProperties(layerData)) {\r\n            layerId = idx;\r\n            this._tileFlagsLayers[level].push(idx);\r\n            this._initializeMapLevelData(level, layerId, ['tileFlags']);\r\n        }\r\n        \r\n        let tileFlagMap = this._tileFlags[level][layerId];\r\n\r\n        for (let x of Array(size).keys()) {\r\n            let realX = x;\r\n            if (this.isHalfTile()) {\r\n                realX = Math.floor(x / halfWidth) * width * 2 + (x % halfWidth) * 2;\r\n            }\r\n\r\n            if (!!layerData.data[x]) {\r\n                let tileFlags = 0;\r\n                let tileId = layerData.data[x];\r\n                let tileset = this._getTileset(tileId);\r\n                if(tileset && tileset.tileproperties) {\r\n                    let tileData = tileset.tileproperties[tileId - tileset.firstgid];\r\n                    if(tileData) {\r\n                        tileFlags = this._getTileFlags(tileData);\r\n                    }\r\n                }\r\n                tileFlagMap[realX] = this._combineFlags(tileFlagMap[realX], tileFlags);\r\n                if (this.isHalfTile()) {\r\n                    tileFlagMap[realX + 1] = this._combineFlags(tileFlagMap[realX + 1], tileFlags);\r\n                    tileFlagMap[realX + width] = this._combineFlags(tileFlagMap[realX + width], tileFlags);\r\n                    tileFlagMap[realX + width + 1] = this._combineFlags(tileFlagMap[realX + width + 1], tileFlags);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nGame_Map.prototype._getTileFlags = function(tileData) {\r\n    let flags = []\r\n    let flagNames = TiledManager.getFlagNames()\r\n    flagNames.forEach(prop => {\r\n        let property = 'flagIs' + prop.slice(0, 1).toUpperCase() + prop.slice(1)\r\n        if(tileData[property]) {\r\n            let [group, bit] = TiledManager.getFlagLocation(prop)\r\n            for(let i = flags.length; i <= group; i++) {\r\n                flags.push(0)\r\n            }\r\n            flags[group]|= bit\r\n        }\r\n    })\r\n    return flags.length > 0 ? flags : 0\r\n}\r\n\r\nGame_Map.prototype._combineFlags = function (source, target) {\r\n    source = source ? source.slice(0) : []\r\n    for(let i = 0; i < target.length; i++) {\r\n        if(!source.length <= i) {\r\n            source.push(i)\r\n        }\r\n        source[i]|= target[i];\r\n    }\r\n    return source;\r\n}\r\n\r\nGame_Map.prototype._setupTiledEvents = function () {\r\n    for (let layerData of this.tiledData.layers) {\r\n        if (layerData.type !== \"objectgroup\") {\r\n            continue;\r\n        }\r\n\r\n        for (let object of layerData.objects) {\r\n            if (!object.properties) {\r\n                continue;\r\n            }\r\n\r\n            if (!object.properties.eventId) {\r\n                continue;\r\n            }\r\n\r\n            let eventId = parseInt(object.properties.eventId);\r\n            let event = this._events[eventId];\r\n            if (!event) {\r\n                continue;\r\n            }\r\n            let x = Math.floor(object.x / this.tileWidth());\r\n            let y = Math.floor(object.y / this.tileHeight());\r\n            if (this.isHalfTile()) {\r\n                x += 1;\r\n                y += 1;\r\n            }\r\n            event.locate(x, y);\r\n\t\t\tevent._tiledProperties = object.properties;\r\n        }\r\n    }\r\n};\r\n\r\nGame_Map.prototype.isHalfTile = function () {\r\n    let pluginParams = PluginManager.parameters(\"YED_Tiled\");\r\n    return pluginParams[\"Half-tile movement\"].toLowerCase() === \"true\";\r\n};\r\n\r\nGame_Map.prototype._getTileset = function(tileId) {\r\n    for(let idx = 0; idx < this.tiledData.tilesets.length; idx++) {\r\n        let tileset = this.tiledData.tilesets[idx];\r\n        if(tileId >= tileset.firstgid && tileId < tileset.firstgid + tileset.tilecount) {\r\n            return tileset;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nGame_Map.prototype.tileWidth = function () {\r\n    let tileWidth = this.tiledData.tilewidth;\r\n    if (this.isHalfTile()) {\r\n        tileWidth /= 2;\r\n    }\r\n    return tileWidth;\r\n};\r\n\r\nGame_Map.prototype.tileHeight = function () {\r\n    let tileHeight = this.tiledData.tileheight;\r\n    if (this.isHalfTile()) {\r\n        tileHeight /= 2;\r\n    }\r\n    return tileHeight;\r\n};\r\n\r\nGame_Map.prototype.width = function () {\r\n    let width = this.tiledData.width;\r\n    if (this.isHalfTile()) {\r\n        width *= 2;\r\n    }\r\n    return width;\r\n};\r\n\r\nGame_Map.prototype.height = function () {\r\n    let height = this.tiledData.height;\r\n    if (this.isHalfTile()) {\r\n        height *= 2;\r\n    }\r\n    return height;\r\n};\r\n\r\nlet _regionId = Game_Map.prototype.regionId;\r\nGame_Map.prototype.regionId = function (x, y, allIds = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _regionId.call(this, x, y);\r\n    }\r\n\r\n    let index = x + this.width() * y;\r\n    let regionMap = this._regions[this.currentMapLevel];\r\n    let regionLayer = this._regionsLayers[this.currentMapLevel];\r\n    \r\n    let regionValue = regionMap.main[index];\r\n    let regionValues = [regionValue];\r\n\r\n    if(regionLayer && regionLayer.length > 0) {\r\n        for(let idx = 0; idx < regionLayer.length; idx++) {\r\n            let layerId = regionLayer[idx];\r\n            let layerData = this.tiledData.layers[layerId];\r\n            let hideData = TiledManager.checkLayerHidden(layerData, 'regions');\r\n            if(!hideData[1]) {\r\n                if(allIds) {\r\n                    regionValues.push(regionMap[layerId][index]);\r\n                } else {\r\n                    regionValue = regionMap[layerId][index];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return allIds ? regionValues : regionValue;\r\n};\r\n\r\nGame_Map.prototype.regionIds = function (x, y) {\r\n    return this.regionId(x, y, true);\r\n}\r\n\r\nlet _checkPassage = Game_Map.prototype.checkPassage;\r\nGame_Map.prototype.checkPassage = function (x, y, bit, render = false, level = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _checkPassage.call(this, x, y, d);\r\n    }\r\n    if(level === false) {\r\n        level = this._currentMapLevel;\r\n    }\r\n    let index = x + this.width() * y;\r\n    let arrows = this._arrowCollisionMap[level];\r\n    let arrowLayer = this._arrowCollisionMapLayers[level];\r\n    let arrowValue = arrows.main[index];\r\n    \r\n    if(render && arrows[render]) {\r\n        arrowValue = arrows[render][index];\r\n    } else if(arrowLayer && arrowLayer.length > 0) {\r\n        for(let idx = 0; idx < arrowLayer.length; idx++) {\r\n            let layerId = arrowLayer[idx];\r\n            let layerData = this.tiledData.layers[layerId];\r\n            let hideData = TiledManager.checkLayerHidden(layerData, 'collisions');\r\n            if(!hideData[1]) {\r\n                arrowValue&= regionMap[layerId][index];\r\n            }\r\n        }\r\n    }\r\n\r\n    return (arrowValue & bit) > 0\r\n}\r\n\r\nGame_Map.prototype.renderPassage = function (x, y, bit, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    if(render && !this._arrowCollisionMap[level][render]) {\r\n        render = 'main';\r\n    }\r\n    return this.checkPassage(x, y, bit, render, level);\r\n}\r\n\r\nGame_Map.prototype.getPassageLayers = function(level) {\r\n    return this._arrowCollisionMapLayers[level].slice(0);\r\n}\r\n\r\nlet _isPassable = Game_Map.prototype.isPassable;\r\nGame_Map.prototype.isPassable = function (x, y, d, render = false, level = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _isPassable.call(this, x, y, d);\r\n    }\r\n    if(level === false) {\r\n        level = this._currentMapLevel;\r\n    }\r\n\r\n    if(!this.checkPassage(x, y, (1 << (d / 2 - 1)) & 0x0f, render)) {\r\n        return false;\r\n    }\r\n    \r\n    let index = x + this.width() * y;\r\n    let collisionMap = this._collisionMap[level];\r\n    let collisionLayer = this._collisionMapLayers[level];\r\n    let collisionValue = collisionMap.main[index]\r\n    \r\n    if(render && collisionMap[render]) {\r\n        collisionValue = collisionMap[render][index];\r\n    } else if(collisionLayer && collisionLayer.length > 0) {\r\n        for(let idx = 0; idx < collisionLayer.length; idx++) {\r\n            let layerId = collisionLayer[idx];\r\n            let layerData = this.tiledData.layers[layerId];\r\n            let hideData = TiledManager.checkLayerHidden(layerData, 'collisions');\r\n            if(!hideData[1]) {\r\n                collisionValue|= collisionMap[layerId][index];\r\n            }\r\n        }\r\n    }\r\n\r\n    return collisionValue === 0;\r\n};\r\n\r\nGame_Map.prototype.renderIsPassable = function (x, y, d, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    if(render && !this._collisionMap[level][render]) {\r\n        render = 'main';\r\n    }\r\n    return this.isPassable(x, y, d, render, level);\r\n}\r\n\r\nGame_Map.prototype.getIsPassableLayers = function(level) {\r\n    return this._collisionMapLayers[level].slice(0);\r\n}\r\n\r\nGame_Map.prototype.checkMapLevelChanging = function (x, y) {\r\n    let mapLevelChange = this._mapLevelChange[this.currentMapLevel];\r\n    let mapLevelChangeLayer = this._mapLevelChangeLayers[this.currentMapLevel];\r\n    let index = y * this.width() + x;\r\n    let mapLevelChangeValue = mapLevelChange.main[index]\r\n    if(mapLevelChangeLayer.length > 0) {\r\n        for(let idx = 0; idx < mapLevelChangeLayer.length; idx++) {\r\n            let layerId = mapLevelChangeLayer[idx];\r\n            let layerData = this.tiledData.layers[layerId];\r\n            let hideData = TiledManager.checkLayerHidden(layerData, 'levelChanges');\r\n            if(!hideData[1]) {\r\n                mapLevelChangeValue = mapLevelChange[layerId][index];\r\n            }\r\n        }\r\n    }\r\n    if (mapLevelChangeValue < 0) {\r\n        return false;\r\n    }\r\n    this.currentMapLevel = mapLevelChangeValue;\r\n    return true;\r\n};\r\n\r\nGame_Map.prototype.getTileFlags = function (x, y, render = false, level = false) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    let index = x + this.width() * y;\r\n    let tileFlags = this._tileFlags[level];\r\n    let tileFlagsLayer = this._tileFlagsLayers[level];\r\n    let tileFlagsValue = (tileFlags.main[index] ? tileFlags.main[index].slice(0) : []);\r\n\r\n    if(render && tileFlags[render]) {\r\n        tileFlagsValue = (tileFlags[render][index] ? tileFlags[render][index].slice(0) : []);\r\n    } else if(tileFlagsLayer && tileFlagsLayer.length > 0) {\r\n        for(let idx = 0; idx < tileFlagsLayer.length; idx++) {\r\n            let layerId = tileFlagsLayer[idx];\r\n            let layerData = this.tiledData.layers[layerId];\r\n            let hideData = TiledManager.checkLayerHidden(layerData, 'tileFlags');\r\n            if(!hideData[1] && tileFlags[layerId][index]) {\r\n                tileFlagsValue[i] = this._combineFlags(tileFlagsValue[i], tileFlags[layerId][index])\r\n            }\r\n        }\r\n    }\r\n    return tileFlagsValue\r\n}\r\n\r\nGame_Map.prototype.renderTileFlags = function (x, y, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    if(render && !this._tileFlags[level][render]) {\r\n        render = 'main';\r\n    }\r\n    return this.getTileFlags(x, y, render, level);\r\n}\r\n\r\nGame_Map.prototype.checkHasTileFlag = function (x, y, flag, render = false, level = false) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    if(typeof flag === 'string') {\r\n        flag = TiledManager.getFlag(flag)\r\n    }\r\n    let bit = (1 << (flag % 16)) & 0xffff;\r\n    let group = Math.floor(flag / 16);\r\n    let tileFlagsValue = this.getTileFlags(x, y, render, level);\r\n    \r\n    return (tileFlagsValue[group] & bit) > 0\r\n}\r\n\r\nGame_Map.prototype.renderHasTileFlag = function (x, y, flag, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    if(render && !this._tileFlags[level][render]) {\r\n        render = 'main';\r\n    }\r\n    return this.checkHasTileFlag(x, y, flag, render, level);\r\n}\r\n\r\nlet _isBoatPassable = Game_Map.prototype.isBoatPassable\r\nGame_Map.prototype.isBoatPassable = function(x, y, render = false, level = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _isBoatPassable.call(this, x, y);\r\n    }\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.checkHasTileFlag(x, y, 'boat', render, level);\r\n};\r\n\r\nGame_Map.prototype.renderIsBoatPassable = function(x, y, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isBoatPassable(x, y, render, level);\r\n}\r\n\r\nlet _isShipPassable = Game_Map.prototype.isShipPassable\r\nGame_Map.prototype.isShipPassable = function(x, y, render = false, level = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _isShipPassable.call(this, x, y);\r\n    }\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.checkHasTileFlag(x, y, 'ship', render);\r\n};\r\n\r\nGame_Map.prototype.renderIsShipPassable = function(x, y, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isShipPassable(x, y, render, level);\r\n}\r\n\r\nlet _isAirshipLandOk = Game_Map.prototype.isAirshipLandOk\r\nGame_Map.prototype.isAirshipLandOk = function(x, y, render = false, level = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _isAirshipLandOk.call(this, x, y);\r\n    }\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.checkHasTileFlag(x, y, 'airship', render) && this.checkPassage(x, y, 0x0f, render);\r\n};\r\n\r\nGame_Map.prototype.renderIsAirshipLandOk = function(x, y, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isAirshipLandOk(x, y, render, level);\r\n}\r\n\r\nlet _isLadder = Game_Map.prototype.isLadder\r\nGame_Map.prototype.isLadder = function(x, y, render = false, level = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _isLadder.call(this, x, y);\r\n    }\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isValid(x, y) && this.checkHasTileFlag(x, y, 'ladder', render);\r\n};\r\n\r\nGame_Map.prototype.renderIsLadder = function(x, y, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isLadder(x, y, render, level);\r\n}\r\n\r\nlet _isBush = Game_Map.prototype.isBush\r\nGame_Map.prototype.isBush = function(x, y, render = false, level = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _isBush.call(this, x, y);\r\n    }\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isValid(x, y) && this.checkHasTileFlag(x, y, 'bush', render);\r\n};\r\n\r\nGame_Map.prototype.renderIsBush = function(x, y, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isBush(x, y, render, level);\r\n}\r\n\r\nlet _isCounter = Game_Map.prototype.isCounter\r\nGame_Map.prototype.isCounter = function(x, y, render = false, level = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _isCounter.call(this, x, y);\r\n    }\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isValid(x, y) && this.checkHasTileFlag(x, y, 'counter', render);\r\n};\r\n\r\nGame_Map.prototype.renderIsCounter = function(x, y, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isCounter(x, y, render, level);\r\n}\r\n\r\nlet _isDamageFloor = Game_Map.prototype.isDamageFloor\r\nGame_Map.prototype.isDamageFloor = function(x, y, render = false, level = false) {\r\n    if (!this.isTiledMap()) {\r\n        return _isDamageFloor.call(this, x, y);\r\n    }\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isValid(x, y) && this.checkHasTileFlag(x, y, 'damage', render);\r\n};\r\n\r\nGame_Map.prototype.renderIsDamageFloor = function(x, y, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isDamageFloor(x, y, render, level);\r\n}\r\n\r\nGame_Map.prototype.isSlipperyFloor = function(x, y, render = false, level = false) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isValid(x, y) && this.checkHasTileFlag(x, y, 'ice', render);\r\n};\r\n\r\nGame_Map.prototype.renderIsSlipperyFloor = function(x, y, render = 'main', level = 0) {\r\n    if(level === false) {\r\n        level = 0;\r\n    }\r\n    return this.isSlipperyFloor(x, y, render, level);\r\n}\r\n\r\nGame_Map.prototype.getLayerProperties = function(layer = -1, ignoreHidden = true) {\r\n\tif(layer > -1) {\r\n\t\tif(this.tiledData.layers[layer] && this.tiledData.layers[layer].properties) {\r\n\t\t\treturn Object.assign({}, this.tiledData.layers[layer].properties);\r\n\t\t}\r\n\t\treturn {};\r\n\t}\r\n\tlet layerProperties = {};\r\n\tthis.tiledData.layers.forEach((layerData, i) => {\r\n\t\tif(layerData && layerData.properties) {\r\n            if(!ignoreHidden || !TiledManager.checkLayerHidden(layerData, 'collisions')[1]) {\r\n                layerProperties[i] = Object.assign({}, layerData.properties);\r\n            }\r\n\t\t}\r\n\t});\r\n\treturn layerProperties;\r\n}\r\n\r\nGame_Map.prototype.getTileProperties = function(x, y, layer = -1, ignoreHidden = true) {\r\n    let index = x + this.width() * y;\r\n    \r\n\tif(layer > -1) {\r\n\t\tif(this.tiledData.layers[layer]) {\r\n\t\t\tlet tileId = this.tiledData.layers[layer].data[x];\r\n\t\t\tlet tileset = this._getTileset(tileId);\r\n\t\t\tif(tileset && tileset.tileproperties) {\r\n\t\t\t\treturn Object.assign({}, tileset.tileproperties[tileId - tileset.firstgid]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {};\r\n\t}\r\n\tlet tileProperties = {};\r\n\tthis.tiledData.layers.forEach((layerData, i) => {\r\n\t\tif(layerData && layerData.properties) {\r\n            if(!ignoreHidden || !TiledManager.checkLayerHidden(layerData)[1]) {\r\n                tileProperties[i] = this.getTileProperties(x, y, i);\r\n            }\r\n\t\t}\r\n\t});\r\n\treturn tileProperties;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Game_Map.js","Game_CharacterBase.prototype.screenZ = function () {\r\n    let pluginParams = PluginManager.parameters(\"YED_Tiled\");\r\n    if (this._priorityType == 0) {\r\n        return parseInt(pluginParams[\"Z - Below Player\"]);\r\n    }\r\n    if (this._priorityType == 2) {\r\n        return parseInt(pluginParams[\"Z - Above Player\"]);\r\n    }\r\n    return parseInt(pluginParams[\"Z - Player\"]);\r\n};\r\n\r\nlet _distancePerFrame = Game_CharacterBase.prototype.distancePerFrame;\r\nGame_CharacterBase.prototype.distancePerFrame = function () {\r\n    let distance = _distancePerFrame.call(this);\r\n    return distance * (48 / Math.min($gameMap.tileWidth(), $gameMap.tileHeight()));\r\n};\r\n\r\nlet _refreshBushDepth = Game_CharacterBase.prototype.refreshBushDepth;\r\nGame_CharacterBase.prototype.refreshBushDepth = function() {\r\n    this._bushDepth = 0;\r\n    if(!$gameMap.isTiledMap() || $gameMap.isTiledInitialized()) {\r\n        _refreshBushDepth.call(this);\r\n    } else {\r\n        $gameMap.setRefreshDepth(this);\r\n    }\r\n};\r\n\r\nlet _updateMove = Game_CharacterBase.prototype.updateMove;\r\nGame_CharacterBase.prototype.updateMove = function() {\r\n    var hori = (this._realX > this._x ? 4 : (this._realX < this._x ? 6 : 0))\r\n    var vert = (this._realY > this._y ? 8 : (this._realY < this._y ? 2 : 0))\r\n    var d = hori + vert\r\n    _updateMove.call(this);\r\n    if(!this.isMoving() && $gameMap.isSlipperyFloor(this._x, this._y)) {\r\n        TiledManager.triggerListener(this, 'slipperyfloor', {\r\n            d\r\n        })\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Game_CharacterBase.js","let _checkEventTriggerHere = Game_Player.prototype.checkEventTriggerHere;\r\nGame_Player.prototype.checkEventTriggerHere = function (triggers) {\r\n    _checkEventTriggerHere.call(this, triggers);\r\n    this._checkMapLevelChangingHere();\r\n};\r\n\r\nGame_Player.prototype._checkMapLevelChangingHere = function () {\r\n    $gameMap.checkMapLevelChanging(this.x, this.y);\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Game_Player.js","import { TiledTilemap } from \"./TiledTilemap\";\r\n\r\nlet _createTilemap = Spriteset_Map.prototype.createTilemap;\r\nSpriteset_Map.prototype.createTilemap = function () {\r\n    if (!$gameMap.isTiledMap()) {\r\n        _createTilemap.call(this);\r\n        return;\r\n    }\r\n    this._tilemap = new TiledTilemap($gameMap.tiledData);\r\n    this._tilemap.horizontalWrap = $gameMap.isLoopHorizontal();\r\n    this._tilemap.verticalWrap = $gameMap.isLoopVertical();\r\n    this.loadTileset();\r\n    this._baseSprite.addChild(this._tilemap);\r\n};\r\n\r\nlet _loadTileset = Spriteset_Map.prototype.loadTileset;\r\nSpriteset_Map.prototype.loadTileset = function () {\r\n    if (!$gameMap.isTiledMap()) {\r\n        _loadTileset.call(this);\r\n        return;\r\n    }\r\n\r\n    let i = 0;\r\n    for (let tileset of $gameMap.tiledData.tilesets) {\r\n        this._tilemap.bitmaps[i] = ImageManager.loadParserTileset(tileset.image, 0);\r\n        i++;\r\n    }\r\n    this._tilemap.refreshTileset();\r\n    this._tileset = $gameMap.tiledData.tilesets;\r\n};\r\n\r\nlet _update = Spriteset_Map.prototype.update;\r\nSpriteset_Map.prototype.update = function () {\r\n    _update.call(this);\r\n    this._updateHideOnLevel();\r\n\tthis._updateHideOnSpecial();\r\n};\r\n\r\nSpriteset_Map.prototype.updateTileset = function () {\r\n    if (this._tileset !== $gameMap.tiledData.tilesets) {\r\n        this.loadTileset();\r\n    }\r\n};\r\n\r\nSpriteset_Map.prototype._updateHideOnLevel = function () {\r\n    this._tilemap.hideOnLevel($gameMap.currentMapLevel);\r\n};\r\n\r\nSpriteset_Map.prototype._updateHideOnSpecial = function () {\r\n    if($gamePlayer && $gameMap) {\r\n        this._tilemap.hideOnSpecial();\r\n    }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Spriteset_Map.js"],"sourceRoot":""}